{"version":3,"sources":["webpack://potree/webpack/universalModuleDefinition","webpack://potree/webpack/bootstrap","webpack://potree/external \"three\"","webpack://potree/./src/utils/binary-heap.js","webpack://potree/./src/materials/shaders/blur.vert","webpack://potree/./src/materials/shaders/blur.frag","webpack://potree/./src/materials/shaders/pointcloud.vert","webpack://potree/./src/materials/shaders/pointcloud.frag","webpack://potree/./src/workers/binary-decoder-worker.js","webpack://potree/./node_modules/worker-loader/dist/workers/InlineWorker.js","webpack://potree/./src/materials/clipping.ts","webpack://potree/./src/materials/enums.ts","webpack://potree/./src/materials/blur-material.ts","webpack://potree/./src/constants.ts","webpack://potree/./src/materials/classification.ts","webpack://potree/./src/materials/gradients/grayscale.ts","webpack://potree/./src/materials/gradients/inferno.ts","webpack://potree/./src/materials/gradients/plasma.ts","webpack://potree/./src/materials/gradients/rainbow.ts","webpack://potree/./src/materials/gradients/spectral.ts","webpack://potree/./src/materials/gradients/vidris.ts","webpack://potree/./src/materials/gradients/yellow-green.ts","webpack://potree/./src/materials/texture-generation.ts","webpack://potree/./src/point-attributes.ts","webpack://potree/./src/materials/point-cloud-material.ts","webpack://potree/./src/utils/bounds.ts","webpack://potree/./src/utils/utils.ts","webpack://potree/./src/point-cloud-octree-geometry-node.ts","webpack://potree/./src/point-cloud-octree-geometry.ts","webpack://potree/./src/point-cloud-octree-node.ts","webpack://potree/./src/point-cloud-tree.ts","webpack://potree/./src/utils/math.ts","webpack://potree/./src/point-cloud-octree.ts","webpack://potree/./src/features.ts","webpack://potree/./src/version.ts","webpack://potree/./src/loading/binary-loader.ts","webpack://potree/./src/loading/load-poc.ts","webpack://potree/./src/type-predicates.ts","webpack://potree/./src/utils/box3-helper.ts","webpack://potree/./src/utils/lru.ts","webpack://potree/./src/potree.ts","webpack://potree/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BinaryHeap","scoreFunction","this","content","push","element","bubbleUp","length","pop","result","end","sinkDown","remove","node","size","score","parentN","Math","floor","parent","elemScore","child2N","child1N","swap","child1","child1Score","child2","__webpack_exports__","URL","webkitURL","url","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","e","Blob","Worker","createObjectURL","encodeURIComponent","Error","ClipMode","PointSizeType","PointShape","TreeType","PointOpacityType","PointColorType","BlurMaterial","_super","_this","apply","arguments","vertexShader","fragmentShader","uniforms","near","type","far","screenWidth","screenHeight","map","__extends","external_three_","DEFAULT_RGB_BRIGHTNESS","DEFAULT_RGB_CONTRAST","DEFAULT_RGB_GAMMA","DEFAULT_MAX_POINT_SIZE","DEFAULT_MIN_NODE_PIXEL_SIZE","DEFAULT_MIN_POINT_SIZE","DEFAULT_POINT_BUDGET","MAX_NUM_NODES_LOADING","DEFAULT_CLASSIFICATION","0","1","2","3","4","5","6","7","8","9","12","DEFAULT","GRAYSCALE","INFERNO","PLASMA","RAINBOW","SPECTRAL","VIRIDIS","YELLOW_GREEN","generateDataTexture","width","height","color","data","Uint8Array","g","b","texture","needsUpdate","magFilter","generateGradientTexture","gradient","canvas","document","createElement","context","getContext","rect","ctxGradient","createLinearGradient","step","addColorStop","getHexString","fillStyle","fill","minFilter","generateClassificationTexture","classification","x","y","z","w","PointAttributeName","TREE_TYPE_DEFS","point_cloud_material_a","OCTREE","KDTREE","SIZE_TYPE_DEFS","point_cloud_material_b","FIXED","ATTENUATED","ADAPTIVE","OPACITY_DEFS","_c","SHAPE_DEFS","_d","SQUARE","CIRCLE","PARABOLOID","COLOR_DEFS","_e","RGB","COLOR","DEPTH","HEIGHT","INTENSITY","INTENSITY_GRADIENT","LOD","POINT_INDEX","CLASSIFICATION","RETURN_NUMBER","SOURCE","NORMAL","PHONG","RGB_HEIGHT","COMPOSITE","CLIP_MODE_DEFS","_f","DISABLED","CLIP_OUTSIDE","HIGHLIGHT_INSIDE","point_cloud_material_PointCloudMaterial","PointCloudMaterial","parameters","lights","fog","numClipBoxes","clipBoxes","_gradient","gradientTexture","_classification","classificationTexture","bbSize","makeUniform","blendDepthSupplement","blendHardness","classificationLUT","clipBoxCount","depthMap","diffuse","fov","heightMax","heightMin","intensityBrightness","intensityContrast","intensityGamma","intensityRange","isLeafNode","level","maxSize","minSize","octreeSize","opacity","pcIndex","rgbBrightness","rgbContrast","rgbGamma","spacing","toModel","transition","uColor","visibleNodes","visibleNodesTexture","vnStart","wClassification","wElevation","wIntensity","wReturnNumber","wRGB","wSourceID","opacityAttenuation","filterByNormalThreshold","useClipBox","weighted","pointColorType","pointSizeType","clipMode","useEDL","shape","treeType","pointOpacityType","useFilterByNormal","attributes","position","normal","intensity","returnNumber","numberOfReturns","pointSourceID","indices","tex","setUniform","getValid","defaultAttributeValues","vertexColors","updateShaderSource","point_cloud_material_extends","applyDefines","default","blending","transparent","depthTest","depthWrite","depthFunc","shaderSrc","parts","join","setClipBoxes","doUpdate","clipBoxesLength","clipBoxesArray","Float32Array","set","inverse","elements","isNaN","Infinity","copy","_i","_a","keys","clone","isEqual","undefined","_b","equals","recomputeClassification","getUniform","uObj","__decorate","uniform","requiresShaderUpdate","a","uniformName","requireSrcUpdate","target","propertyKey","fieldName","toString","POINT_ATTRIBUTE_TYPES","DATA_TYPE_DOUBLE","ordinal","DATA_TYPE_FLOAT","DATA_TYPE_INT8","DATA_TYPE_UINT8","DATA_TYPE_INT16","DATA_TYPE_UINT16","DATA_TYPE_INT32","DATA_TYPE_UINT32","DATA_TYPE_INT64","DATA_TYPE_UINT64","makePointAttribute","numElements","byteSize","RGBA_PACKED","COLOR_PACKED","POINT_ATTRIBUTES","POSITION_CARTESIAN","RGB_PACKED","NORMAL_FLOATS","FILLER_1B","FILLER","NORMAL_SPHEREMAPPED","NORMAL_OCT16","PointAttributes","pointAttributeNames","pointAttributeName","pointAttribute","add","hasColors","find","isColorAttribute","hasNormals","isNormalAttribute","computeTransformedBoundingBox","box","transform","setFromPoints","min","applyMatrix4","max","createChildAABB","aabb","index","subVectors","getIndexFromName","parseInt","charAt","byLevelAndIndex","na","nb","point_cloud_octree_geometry_node_PointCloudOctreeGeometryNode","PointCloudOctreeGeometryNode","pcoGeometry","boundingBox","id","idCount","hasChildren","children","mean","numPoints","geometry","loaded","loading","failed","oneTimeDisposeHandlers","isTreeNode","isGeometryNode","tightBoundingBox","boundingSphere","getBoundingSphere","point_cloud_octree_geometry_node_extends","dispose","forEach","handler","getUrl","version","loader","pathParts","octreeDir","equalOrHigher","getHierarchyBaseUrl","upTo","getHierarchyUrl","addChild","child","traverse","cb","includeSelf","current","stack","load","canLoad","numNodesLoading","hierarchyStepSize","loadHierachyThenPoints","loadPoints","catch","reason","Promise","resolve","disposed","maxNumNodesLoading","then","xhrRequest","res","arrayBuffer","loadHierarchy","substr","numParts","path","slice","buffer","view","DataView","firstNodeData","getNodeData","decoded","offset","stackNodeData","shift","mask","byteLength","nodeData","nodes","Map","addNode","getUint8","getUint32","pco","parentName","substring","parentNode","pow","point_cloud_octree_geometry_PointCloudOctreeGeometry","PointCloudOctreeGeometry","pointAttributes","projection","addNodeLoadedCallback","callback","callbacks","clearNodeLoadedCallbacks","PointCloudOctreeNode","geometryNode","sceneNode","boundingBoxNode","point_cloud_octree_node_extends","PointCloudTree","point_cloud_tree_extends","initialized","clamp","helperVec3","point_cloud_octree_PointCloudOctree","PointCloudOctree","potree","material","maxLevel","minNodePixelSize","boundingBoxNodes","visibleGeometry","numVisiblePoints","showBoundingBox","visibleBounds","visibleNodeTextureOffsets","helperSphere","updateMatrix","initMaterial","point_cloud_octree_extends","updateMatrixWorld","getBoundingBoxWorld","matrixWorld","bWidth","clear","pickState","renderTarget","toTreeNode","frustumCulled","onBeforeRender","makeOnBeforeRender","_renderer","_scene","_camera","_geometry","materialUniforms","indexOf","uniformsNeedUpdate","updateVisibleBounds","bounds","expandByPoint","updateBoundingBoxes","bbRoot","getObjectByName","visibleBoxes","updateMaterial","camera","renderer","maxScale","scale","pixelRatio","getPixelRatio","PI","domElement","clientWidth","clientHeight","getSize","updateVisibilityTextureData","sort","offsetsToChild","Array","parentOffset","parentOffsetToChild","image","nodesOnRay","ray","rayClone","nodes_1","sphere","intersectsSphere","force","matrixAutoUpdate","matrixWorldNeedsUpdate","multiplyMatrices","matrix","hideDescendants","toHide","addVisibleChildren","objToHide","visible","obj","moveToOrigin","sub","getCenter","moveToGroundPlane","getVisibleExtent","pick","params","pickWndSize","pickWindowSize","ceil","getPickState","pickMaterial","tempNodes","tempNode","scene","autoUpdate","updatePickMaterial","updatePickRenderTarget","onBeforePickRender","pixelPosition","addVectors","direction","project","halfPickWndSize","setScissor","setScissorTest","state","buffers","depth","setTest","setMask","setBlending","setRenderTarget","render","pixels","readRenderTargetPixels","ibuffer","Uint32Array","Number","MAX_VALUE","hit","u","v","distance","pIndex","getPickPoint","point","points","values","addPositionToPickPoint","addNormalToPickPoint","itemSize","array","j","normalsArray","getInverse","transpose","datasetNormal","makePickRenderTarget","pickOutsideClipRegion","setSize","format","features_canvas","gl","FEATURES","SHADER_INTERPOLATION","hasExtension","hasMinVaryingVectors","SHADER_SPLATS","SHADER_EDL","precision","vsHighpFloat","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","vsMediumpFloat","MEDIUM_FLOAT","fsHighpFloat","FRAGMENT_SHADER","fsMediumpFloat","highpAvailable","mediumpAvailable","getPrecision","ext","Boolean","getExtension","getParameter","MAX_VARYING_VECTORS","Version","versionMinor","vmLength","versionMajor","newerThan","binary_loader_BinaryLoader","BinaryLoader","workers","worker","terminate","getNodeUrl","parse","getWorker","onmessage","addBufferAttributes","attributeBuffers","addIndices","addNormalAttribute","fromArray","getTightBoundingBox","releaseWorker","message","toArray","postMessage","isAttribute","addAttribute","indicesAttribute","normalized","getAttribute","loadPOC","transformedUrl","json","lx","ly","lz","ux","uy","uz","getBoundingBoxes","hierarchy","loadRoot","name_1","loadRemainingHierarchy","box3_helper_Box3Helper","Box3Helper","Uint16Array","positions","setIndex","box3_helper_extends","LRUItem","next","previous","LRU","pointBudget","first","last","items","has","touch","item","touchExisting","addNew","delete","getLRUItem","freeMemory","disposeDescendants","QueueItem","pointCloudIndex","weight","potree_Potree","Potree","frustumMatrix","inverseWorldMatrix","cameraMatrix","_pointBudget","_rendererSize","features","lru","updateVisibilityStructures","pointClouds","frustums","cameraPositions","priorityQueue","binary_heap","pointCloud","inverseViewMatrix","matrixWorldInverse","worldMatrix","identity","multiply","projectionMatrix","setFromMatrix","setFromMatrixPosition","loadPointCloud","input","init","fetch","updatePointClouds","updateVisibility","queueItem","unloadedGeometry","loadedToGPUThisFrame","exceededMaxLoadsToGPU","nodeLoadFailed","intersectsBox","shouldClip","updateTreeNodeVisibility","halfHeight","updateChildVisibility","numNodesToLoad","nodeLoadPromises","updateBoundingBoxVisibility","cameraPosition","center","distanceTo","radius","projectionFactor","tan","orthographic","top","bottom","screenPixelRadius","boxHelper","box2","clipMatrixWorld","clipBoxWorld"],"mappings":"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","file":"potree.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"potree\", [\"three\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"potree\"] = factory(require(\"three\"));\n\telse\n\t\troot[\"potree\"] = factory(root[\"three\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * from: http://eloquentjavascript.net/1st_edition/appendix2.html\n *\n */\n\nexport function BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  },\n\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  },\n\n  remove: function(node) {\n    var length = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (var i = 0; i < length; i++) {\n      if (this.content[i] != node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      var end = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i == length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  },\n\n  size: function() {\n    return this.content.length;\n  },\n\n  bubbleUp: function(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n],\n      score = this.scoreFunction(element);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = Math.floor((n + 1) / 2) - 1,\n        parent = this.content[parentN];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (score >= this.scoreFunction(parent)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  },\n\n  sinkDown: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N;\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  },\n};\n","export default \"precision highp float;\\nprecision highp int;\\n\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n\\n    gl_Position =   projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","export default \"precision highp float;\\nprecision highp int;\\n\\nuniform mat4 projectionMatrix;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\nuniform float near;\\nuniform float far;\\n\\nuniform sampler2D map;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tfloat dx = 1.0 / screenWidth;\\n\\tfloat dy = 1.0 / screenHeight;\\n\\n\\tvec3 color = vec3(0.0, 0.0, 0.0);\\n\\tcolor += texture2D(map, vUv + vec2(-dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,  dy)).rgb;\\n    \\n\\tcolor = color / 9.0;\\n\\t\\n\\tgl_FragColor = vec4(color, 1.0);\\n\\t\\n\\t\\n}\"","export default \"precision highp float;\\nprecision highp int;\\n\\n#define max_clip_boxes 30\\n\\nattribute vec3 position;\\nattribute vec3 color;\\nattribute vec3 normal;\\nattribute float intensity;\\nattribute float classification;\\nattribute float returnNumber;\\nattribute float numberOfReturns;\\nattribute float pointSourceID;\\nattribute vec4 indices;\\n\\nuniform mat4 modelMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\n\\nuniform float pcIndex;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\nuniform float fov;\\nuniform float spacing;\\nuniform float near;\\nuniform float far;\\n\\n#if defined use_clip_box\\n\\tuniform mat4 clipBoxes[max_clip_boxes];\\n#endif\\n\\nuniform float heightMin;\\nuniform float heightMax;\\nuniform float size; // pixel size factor\\nuniform float minSize; // minimum pixel size\\nuniform float maxSize; // maximum pixel size\\nuniform float octreeSize;\\nuniform vec3 bbSize;\\nuniform vec3 uColor;\\nuniform float opacity;\\nuniform float clipBoxCount;\\nuniform float level;\\nuniform float vnStart;\\nuniform bool isLeafNode;\\n\\nuniform float filterByNormalThreshold;\\nuniform vec2 intensityRange;\\nuniform float opacityAttenuation;\\nuniform float intensityGamma;\\nuniform float intensityContrast;\\nuniform float intensityBrightness;\\nuniform float rgbGamma;\\nuniform float rgbContrast;\\nuniform float rgbBrightness;\\nuniform float transition;\\nuniform float wRGB;\\nuniform float wIntensity;\\nuniform float wElevation;\\nuniform float wClassification;\\nuniform float wReturnNumber;\\nuniform float wSourceID;\\n\\nuniform sampler2D visibleNodes;\\nuniform sampler2D gradient;\\nuniform sampler2D classificationLUT;\\nuniform sampler2D depthMap;\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\n\\n// ---------------------\\n// OCTREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)\\n\\n/**\\n * Rounds the specified number to the closest integer.\\n */\\nfloat round(float number){\\n\\treturn floor(number + 0.5);\\n}\\n\\n/**\\n * Gets the number of 1-bits up to inclusive index position.\\n * \\n * number is treated as if it were an integer in the range 0-255\\n */\\nint numberOfOnes(int number, int index) {\\n\\tint numOnes = 0;\\n\\tint tmp = 128;\\n\\tfor (int i = 7; i >= 0; i--) {\\n\\n\\t\\tif (number >= tmp) {\\n\\t\\t\\tnumber = number - tmp;\\n\\n\\t\\t\\tif (i <= index) {\\n\\t\\t\\t\\tnumOnes++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttmp = tmp / 2;\\n\\t}\\n\\n\\treturn numOnes;\\n}\\n\\n/**\\n * Checks whether the bit at index is 1.0\\n *\\n * number is treated as if it were an integer in the range 0-255\\n */\\nbool isBitSet(int number, int index){\\n\\n\\t// weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0\\n\\tint powi = 1;\\n\\tif (index == 0) {\\n\\t\\tpowi = 1;\\n\\t} else if (index == 1) {\\n\\t\\tpowi = 2;\\n\\t} else if (index == 2) {\\n\\t\\tpowi = 4;\\n\\t} else if (index == 3) {\\n\\t\\tpowi = 8;\\n\\t} else if (index == 4) {\\n\\t\\tpowi = 16;\\n\\t} else if (index == 5) {\\n\\t\\tpowi = 32;\\n\\t} else if (index == 6) {\\n\\t\\tpowi = 64;\\n\\t} else if (index == 7) {\\n\\t\\tpowi = 128;\\n\\t}\\n\\n\\tint ndp = number / powi;\\n\\n\\treturn mod(float(ndp), 2.0) != 0.0;\\n}\\n\\n/**\\n * Gets the the LOD at the point position.\\n */\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tint iOffset = int(vnStart);\\n\\tfloat depth = level;\\n\\n\\tfor (float i = 0.0; i <= 30.0; i++) {\\n\\t\\tfloat nodeSizeAtLevel = octreeSize  / pow(2.0, i + level + 0.0);\\n\\t\\t\\n\\t\\tvec3 index3d = (position-offset) / nodeSizeAtLevel;\\n\\t\\tindex3d = floor(index3d + 0.5);\\n\\t\\tint index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\\n\\t\\t\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\\n\\t\\tint mask = int(round(value.r * 255.0));\\n\\n\\t\\tif (isBitSet(mask, index)) {\\n\\t\\t\\t// there are more visible child nodes at this position\\n\\t\\t\\tint advanceG = int(round(value.g * 255.0)) * 256;\\n\\t\\t\\tint advanceB = int(round(value.b * 255.0));\\n\\t\\t\\tint advanceChild = numberOfOnes(mask, index - 1);\\n\\t\\t\\tint advance = advanceG + advanceB + advanceChild;\\n\\n\\t\\t\\tiOffset = iOffset + advance;\\n\\n\\t\\t\\tdepth++;\\n\\t\\t} else {\\n\\t\\t\\treturn value.a * 255.0; // no more visible child nodes at this position\\n\\t\\t}\\n\\t\\t\\n\\t\\toffset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;  \\n\\t}\\n\\t\\t\\n\\treturn depth;\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(2.0, getLOD());\\n}\\n\\n#endif\\n\\n// ---------------------\\n// KD-TREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)\\n\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tfloat intOffset = 0.0;\\n\\tfloat depth = 0.0;\\n\\t\\t\\t\\n\\tvec3 size = bbSize;\\t\\n\\tvec3 pos = position;\\n\\t\\t\\n\\tfor (float i = 0.0; i <= 1000.0; i++) {\\n\\t\\t\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(intOffset / 2048.0, 0.0));\\n\\t\\t\\n\\t\\tint children = int(value.r * 255.0);\\n\\t\\tfloat next = value.g * 255.0;\\n\\t\\tint split = int(value.b * 255.0);\\n\\t\\t\\n\\t\\tif (next == 0.0) {\\n\\t\\t \\treturn depth;\\n\\t\\t}\\n\\t\\t\\n\\t\\tvec3 splitv = vec3(0.0, 0.0, 0.0);\\n\\t\\tif (split == 1) {\\n\\t\\t\\tsplitv.x = 1.0;\\n\\t\\t} else if (split == 2) {\\n\\t\\t \\tsplitv.y = 1.0;\\n\\t\\t} else if (split == 4) {\\n\\t\\t \\tsplitv.z = 1.0;\\n\\t\\t}\\n\\t\\t\\n\\t\\tintOffset = intOffset + next;\\n\\t\\t\\n\\t\\tfloat factor = length(pos * splitv / size);\\n\\t\\tif (factor < 0.5) {\\n\\t\\t \\t// left\\n\\t\\t\\tif (children == 0 || children == 2) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// right\\n\\t\\t\\tpos = pos - size * splitv * 0.5;\\n\\t\\t\\tif (children == 0 || children == 1) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t\\tif (children == 3) {\\n\\t\\t\\t\\tintOffset = intOffset + 1.0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsize = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);\\n\\t\\t\\n\\t\\tdepth++;\\n\\t}\\n\\t\\t\\n\\t\\t\\n\\treturn depth;\\t\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(1.3, getLOD());\\n}\\n\\n#endif\\n\\n// formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/\\nfloat getContrastFactor(float contrast) {\\n\\treturn (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);\\n}\\n\\nvec3 getRGB() {\\n\\t#if defined(use_rgb_gamma_contrast_brightness)\\n\\t  vec3 rgb = color;\\n\\t\\trgb = pow(rgb, vec3(rgbGamma));\\n\\t\\trgb = rgb + rgbBrightness;\\n\\t\\trgb = (rgb - 0.5) * getContrastFactor(rgbContrast) + 0.5;\\n\\t\\trgb = clamp(rgb, 0.0, 1.0);\\n\\t\\treturn rgb;\\n\\t#else\\n\\t\\treturn color;\\n\\t#endif\\n}\\n\\nfloat getIntensity() {\\n\\tfloat w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);\\n\\tw = pow(w, intensityGamma);\\n\\tw = w + intensityBrightness;\\n\\tw = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;\\n\\tw = clamp(w, 0.0, 1.0);\\n\\t\\n\\treturn w;\\n}\\n\\nvec3 getElevation() {\\n\\tvec4 world = modelMatrix * vec4( position, 1.0 );\\n\\tfloat w = (world.z - heightMin) / (heightMax-heightMin);\\n\\tvec3 cElevation = texture2D(gradient, vec2(w,1.0-w)).rgb;\\n\\t\\n\\treturn cElevation;\\n}\\n\\nvec4 getClassification() {\\n\\tvec2 uv = vec2(classification / 255.0, 0.5);\\n\\tvec4 classColor = texture2D(classificationLUT, uv);\\n\\t\\n\\treturn classColor;\\n}\\n\\nvec3 getReturnNumber() {\\n\\tif (numberOfReturns == 1.0) {\\n\\t\\treturn vec3(1.0, 1.0, 0.0);\\n\\t} else {\\n\\t\\tif (returnNumber == 1.0) {\\n\\t\\t\\treturn vec3(1.0, 0.0, 0.0);\\n\\t\\t} else if (returnNumber == numberOfReturns) {\\n\\t\\t\\treturn vec3(0.0, 0.0, 1.0);\\n\\t\\t} else {\\n\\t\\t\\treturn vec3(0.0, 1.0, 0.0);\\n\\t\\t}\\n\\t}\\n}\\n\\nvec3 getSourceID() {\\n\\tfloat w = mod(pointSourceID, 10.0) / 10.0;\\n\\treturn texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n}\\n\\nvec3 getCompositeColor() {\\n\\tvec3 c;\\n\\tfloat w;\\n\\n\\tc += wRGB * getRGB();\\n\\tw += wRGB;\\n\\t\\n\\tc += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);\\n\\tw += wIntensity;\\n\\t\\n\\tc += wElevation * getElevation();\\n\\tw += wElevation;\\n\\t\\n\\tc += wReturnNumber * getReturnNumber();\\n\\tw += wReturnNumber;\\n\\t\\n\\tc += wSourceID * getSourceID();\\n\\tw += wSourceID;\\n\\t\\n\\tvec4 cl = wClassification * getClassification();\\n\\tc += cl.a * cl.rgb;\\n\\tw += wClassification * cl.a;\\n\\n\\tc = c / w;\\n\\t\\n\\tif (w == 0.0) {\\n\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t}\\n\\t\\n\\treturn c;\\n}\\n\\nvoid main() {\\n\\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\t\\tvViewPosition = mvPosition.xyz;\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t\\tvLinearDepth = gl_Position.w;\\n\\t#endif\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\t\\tvNormal = normalize(normalMatrix * normal);\\n\\t#endif\\n\\n\\t#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\t\\tvLogDepth = log2(-mvPosition.z);\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT SIZE\\n\\t// ---------------------\\n\\n\\tfloat pointSize = 1.0;\\n\\tfloat slope = tan(fov / 2.0);\\n\\tfloat projFactor =  -0.5 * screenHeight / (slope * mvPosition.z);\\n\\n\\t#if defined fixed_point_size\\n\\t\\tpointSize = size;\\n\\t#elif defined attenuated_point_size\\n\\t\\tpointSize = size * spacing * projFactor;\\n\\t#elif defined adaptive_point_size\\n\\t\\tfloat worldSpaceSize = 2.0 * size * spacing / getPointSizeAttenuation();\\n\\t\\tpointSize = worldSpaceSize * projFactor;\\n\\t#endif\\n\\n\\tpointSize = max(minSize, pointSize);\\n\\tpointSize = min(maxSize, pointSize);\\n\\n\\t#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\t\\tvRadius = pointSize / projFactor;\\n\\t#endif\\n\\t\\n\\tgl_PointSize = pointSize;\\n\\n\\t// ---------------------\\n\\t// OPACITY\\n\\t// ---------------------\\n\\n\\t#ifndef color_type_point_index\\n\\t\\t#ifdef attenuated_opacity\\n\\t\\t\\tvOpacity = opacity * exp(-length(-mvPosition.xyz) / opacityAttenuation);\\n\\t\\t#else\\n\\t\\t\\tvOpacity = opacity;\\n\\t\\t#endif\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// FILTERING\\n\\t// ---------------------\\n\\n\\t#ifdef use_filter_by_normal\\n\\t\\tif(abs((modelViewMatrix * vec4(normal, 0.0)).z) > filterByNormalThreshold) {\\n\\t\\t\\t// Move point outside clip space space to discard it.\\n\\t\\t\\tgl_Position = vec4(0.0, 0.0, 2.0, 1.0);\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT COLOR\\n\\t// ---------------------\\t\\n\\n\\t#ifdef color_type_rgb\\n\\t\\tvColor = getRGB();\\n\\t#elif defined color_type_height\\n\\t\\tvColor = getElevation();\\n\\t#elif defined color_type_rgb_height\\n\\t\\tvec3 cHeight = getElevation();\\n\\t\\tvColor = (1.0 - transition) * getRGB() + transition * cHeight;\\n\\t#elif defined color_type_depth\\n\\t\\tfloat linearDepth = -mvPosition.z ;\\n\\t\\tfloat expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\\n\\t\\tvColor = vec3(linearDepth, expDepth, 0.0);\\n\\t#elif defined color_type_intensity\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = vec3(w, w, w);\\n\\t#elif defined color_type_intensity_gradient\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_color\\n\\t\\tvColor = uColor;\\n\\t#elif defined color_type_lod\\n\\tfloat w = getLOD() / 10.0;\\n\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_point_index\\n\\t\\tvColor = indices.rgb;\\n\\t#elif defined color_type_classification\\n\\t  vec4 cl = getClassification(); \\n\\t\\tvColor = cl.rgb;\\n\\t#elif defined color_type_return_number\\n\\t\\tvColor = getReturnNumber();\\n\\t#elif defined color_type_source\\n\\t\\tvColor = getSourceID();\\n\\t#elif defined color_type_normal\\n\\t\\tvColor = (modelMatrix * vec4(normal, 0.0)).xyz;\\n\\t#elif defined color_type_phong\\n\\t\\tvColor = color;\\n\\t#elif defined color_type_composite\\n\\t\\tvColor = getCompositeColor();\\n\\t#endif\\n\\t\\n\\t#if !defined color_type_composite && defined color_type_classification\\n\\t\\tif (cl.a == 0.0) {\\n\\t\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// CLIPPING\\n\\t// ---------------------\\n\\n\\t#if defined use_clip_box\\n\\t\\tbool insideAny = false;\\n\\t\\tfor (int i = 0; i < max_clip_boxes; i++) {\\n\\t\\t\\tif (i == int(clipBoxCount)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\tvec4 clipPosition = clipBoxes[i] * modelMatrix * vec4(position, 1.0);\\n\\t\\t\\tbool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;\\n\\t\\t\\tinsideAny = insideAny || inside;\\n\\t\\t}\\n\\n\\t\\tif (!insideAny) {\\n\\t\\t\\t#if defined clip_outside\\n\\t\\t\\t\\tgl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);\\n\\t\\t\\t#elif defined clip_highlight_inside && !defined(color_type_depth)\\n\\t\\t\\t\\tfloat c = (vColor.r + vColor.g + vColor.b) / 6.0;\\n\\t\\t\\t#endif\\n\\t\\t} else {\\n\\t\\t\\t#if defined clip_highlight_inside\\n\\t\\t\\t\\tvColor.r += 0.5;\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n}\"","export default \"precision highp float;\\nprecision highp int;\\n\\n#if defined paraboloid_point_shape\\n\\t#extension GL_EXT_frag_depth : enable\\n#endif\\n\\nuniform mat4 viewMatrix;\\nuniform vec3 cameraPosition;\\n\\nuniform mat4 projectionMatrix;\\nuniform float opacity;\\n\\nuniform float blendHardness;\\nuniform float blendDepthSupplement;\\nuniform float fov;\\nuniform float spacing;\\nuniform float near;\\nuniform float far;\\nuniform float pcIndex;\\nuniform float screenWidth;\\nuniform float screenHeight;\\n\\nuniform sampler2D depthMap;\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\nfloat specularStrength = 1.0;\\n\\nvoid main() {\\n\\tvec3 color = vColor;\\n\\tfloat depth = gl_FragCoord.z;\\n\\n\\t#if defined(circle_point_shape) || defined(paraboloid_point_shape) || defined (weighted_splats)\\n\\t\\tfloat u = 2.0 * gl_PointCoord.x - 1.0;\\n\\t\\tfloat v = 2.0 * gl_PointCoord.y - 1.0;\\n\\t#endif\\n\\t\\n\\t#if defined(circle_point_shape) || defined (weighted_splats)\\n\\t\\tfloat cc = u*u + v*v;\\n\\t\\tif(cc > 1.0){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\t\\n\\t#if defined weighted_splats\\n\\t\\tvec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\\n\\t\\tfloat sDepth = texture2D(depthMap, uv).r;\\n\\t\\tif(vLinearDepth > sDepth + vRadius + blendDepthSupplement){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\t\\t\\n\\t#if defined color_type_point_index\\n\\t\\tgl_FragColor = vec4(color, pcIndex / 255.0);\\n\\t#else\\n\\t\\tgl_FragColor = vec4(color, vOpacity);\\n\\t#endif\\n\\n\\t#if defined(color_type_phong)\\n\\t\\t#if MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0\\n\\t\\t\\tvec3 normal = normalize( vNormal );\\n\\t\\t\\tnormal.z = abs(normal.z);\\n\\n\\t\\t\\tvec3 viewPosition = normalize( vViewPosition );\\n\\t\\t#endif\\n\\n\\t\\t// code taken from three.js phong light fragment shader\\n\\t\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\tvec3 pointDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 pointSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\\n\\t\\t\\t\\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\\n\\n\\t\\t\\t\\tfloat lDistance = 1.0;\\n\\t\\t\\t\\tif ( pointLightDistance[ i ] > 0.0 )\\n\\t\\t\\t\\t\\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\\n\\n\\t\\t\\t\\tlVector = normalize( lVector );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, lVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 pointHalfVector = normalize( lVector + viewPosition );\\n\\t\\t\\t\\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\\n\\t\\t\\t\\tpointSpecular = vec3(0.0, 0.0, 0.0);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t#endif\\n\\t\\t\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\tvec3 dirDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 dirSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\\n\\t\\t\\t\\tvec3 dirVector = normalize( lDirection.xyz );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, dirVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\\n\\t\\t\\t\\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\\n\\t\\t\\t}\\n\\n\\t\\t#endif\\n\\t\\t\\n\\t\\tvec3 totalDiffuse = vec3( 0.0 );\\n\\t\\tvec3 totalSpecular = vec3( 0.0 );\\n\\t\\t\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += pointDiffuse;\\n\\t\\t\\ttotalSpecular += pointSpecular;\\n\\n\\t\\t#endif\\n\\t\\t\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += dirDiffuse;\\n\\t\\t\\ttotalSpecular += dirSpecular;\\n\\n\\t\\t#endif\\n\\t\\t\\n\\t\\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\\n\\n\\t#endif\\n\\t\\n\\t#if defined weighted_splats\\n\\t    //float w = pow(1.0 - (u*u + v*v), blendHardness);\\n\\t\\t\\n\\t\\tfloat wx = 2.0 * length(2.0 * gl_PointCoord - 1.0);\\n\\t\\tfloat w = exp(-wx * wx * 0.5);\\n\\t\\t\\n\\t\\t//float distance = length(2.0 * gl_PointCoord - 1.0);\\n\\t\\t//float w = exp( -(distance * distance) / blendHardness);\\n\\t\\t\\n\\t\\tgl_FragColor.rgb = gl_FragColor.rgb * w;\\n\\t\\tgl_FragColor.a = w;\\n\\t#endif\\n\\t\\n\\t#if defined paraboloid_point_shape\\n\\t\\tfloat wi = 0.0 - ( u*u + v*v);\\n\\t\\tvec4 pos = vec4(vViewPosition, 1.0);\\n\\t\\tpos.z += wi * vRadius;\\n\\t\\tfloat linearDepth = -pos.z;\\n\\t\\tpos = projectionMatrix * pos;\\n\\t\\tpos = pos / pos.w;\\n\\t\\tfloat expDepth = pos.z;\\n\\t\\tdepth = (pos.z + 1.0) / 2.0;\\n\\t\\tgl_FragDepthEXT = depth;\\n\\t\\t\\n\\t\\t#if defined(color_type_depth)\\n\\t\\t\\tgl_FragColor.r = linearDepth;\\n\\t\\t\\tgl_FragColor.g = expDepth;\\n\\t\\t#endif\\n\\t\\t\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = log2(linearDepth);\\n\\t\\t#endif\\n\\t\\t\\n\\t#else\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = vLogDepth;\\n\\t\\t#endif\\n\\t#endif\\t\\n}\\n\"","module.exports = function() {\n  return require(\"!!/Users/rhuitl/work/three-loader/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,\\\"a\\\",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p=\\\"\\\",r(r.s=0)}([function(t,e,r){\\\"use strict\\\";var n=r(1);onmessage=n.handleMessage},function(t,e,r){\\\"use strict\\\";var n;r.r(e),function(t){t[t.POSITION_CARTESIAN=0]=\\\"POSITION_CARTESIAN\\\",t[t.COLOR_PACKED=1]=\\\"COLOR_PACKED\\\",t[t.COLOR_FLOATS_1=2]=\\\"COLOR_FLOATS_1\\\",t[t.COLOR_FLOATS_255=3]=\\\"COLOR_FLOATS_255\\\",t[t.NORMAL_FLOATS=4]=\\\"NORMAL_FLOATS\\\",t[t.FILLER=5]=\\\"FILLER\\\",t[t.INTENSITY=6]=\\\"INTENSITY\\\",t[t.CLASSIFICATION=7]=\\\"CLASSIFICATION\\\",t[t.NORMAL_SPHEREMAPPED=8]=\\\"NORMAL_SPHEREMAPPED\\\",t[t.NORMAL_OCT16=9]=\\\"NORMAL_OCT16\\\",t[t.NORMAL=10]=\\\"NORMAL\\\"}(n||(n={}));var i={ordinal:1,size:4},a={ordinal:2,size:1},o={ordinal:3,size:1},u={ordinal:5,size:2};function s(t,e,r){return{name:t,type:e,numElements:r,byteSize:r*e.size}}var f=s(n.COLOR_PACKED,a,4),A={POSITION_CARTESIAN:s(n.POSITION_CARTESIAN,i,3),RGBA_PACKED:f,COLOR_PACKED:f,RGB_PACKED:s(n.COLOR_PACKED,a,3),NORMAL_FLOATS:s(n.NORMAL_FLOATS,i,3),FILLER_1B:s(n.FILLER,o,1),INTENSITY:s(n.INTENSITY,u,1),CLASSIFICATION:s(n.CLASSIFICATION,o,1),NORMAL_SPHEREMAPPED:s(n.NORMAL_SPHEREMAPPED,o,2),NORMAL_OCT16:s(n.NORMAL_OCT16,o,2),NORMAL:s(n.NORMAL,i,3)};!function(){function t(t){void 0===t&&(t=[]),this.attributes=[],this.byteSize=0,this.size=0;for(var e=0;e<t.length;e++){var r=t[e],n=A[r];this.attributes.push(n),this.byteSize+=n.byteSize,this.size++}}t.prototype.add=function(t){this.attributes.push(t),this.byteSize+=t.byteSize,this.size++},t.prototype.hasColors=function(){return void 0!==this.attributes.find(O)},t.prototype.hasNormals=function(){return void 0!==this.attributes.find(b)}}();function O(t){return t.name===n.COLOR_PACKED}function b(t){var e=t.name;return e===n.NORMAL_SPHEREMAPPED||e===n.NORMAL_FLOATS||e===n.NORMAL||e===n.NORMAL_OCT16}var c=function(){function t(t){this.versionMinor=0,this.version=t;var e=-1===t.indexOf(\\\".\\\")?t.length:t.indexOf(\\\".\\\");this.versionMajor=parseInt(t.substr(0,e),10),this.versionMinor=parseInt(t.substr(e+1),10),isNaN(this.versionMinor)&&(this.versionMinor=0)}return t.prototype.newerThan=function(e){var r=new t(e);return this.versionMajor>r.versionMajor||this.versionMajor===r.versionMajor&&this.versionMinor>r.versionMinor},t.prototype.equalOrHigher=function(e){var r=new t(e);return this.versionMajor>r.versionMajor||this.versionMajor===r.versionMajor&&this.versionMinor>=r.versionMinor},t.prototype.upTo=function(t){return!this.newerThan(t)},t}(),h=function(){function t(t){this.tmp=new ArrayBuffer(4),this.tmpf=new Float32Array(this.tmp),this.tmpu8=new Uint8Array(this.tmp),this.u8=new Uint8Array(t)}return t.prototype.getUint32=function(t){return this.u8[t+3]<<24|this.u8[t+2]<<16|this.u8[t+1]<<8|this.u8[t]},t.prototype.getUint16=function(t){return this.u8[t+1]<<8|this.u8[t]},t.prototype.getFloat32=function(t){var e=this.tmpu8,r=this.u8,n=this.tmpf;return e[0]=r[t+0],e[1]=r[t+1],e[2]=r[t+2],e[3]=r[t+3],n[0]},t.prototype.getUint8=function(t){return this.u8[t]},t}();r.d(e,\\\"handleMessage\\\",function(){return M});var I=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1};function M(t){for(var e=t.data.buffer,r=t.data.pointAttributes,i={attributeBuffers:{},currentOffset:0,data:new h(e),mean:[0,0,0],nodeOffset:t.data.offset,numPoints:t.data.buffer.byteLength/r.byteSize,pointAttributes:r,scale:t.data.scale,tightBoxMax:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],tightBoxMin:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],transferables:[],version:new c(t.data.version)},a=0,o=i.pointAttributes.attributes;a<o.length;a++){var u=o[a];S(u,i),i.currentOffset+=u.byteSize}for(var s=new ArrayBuffer(4*i.numPoints),f=new Uint32Array(s),O=0;O<i.numPoints;O++)f[O]=O;i.attributeBuffers[n.CLASSIFICATION]||function(t){for(var e=new ArrayBuffer(4*t.numPoints),r=new Float32Array(e),i=0;i<t.numPoints;i++)r[i]=0;t.attributeBuffers[n.CLASSIFICATION]={buffer:e,attribute:A.CLASSIFICATION}}(i);var b={buffer:e,mean:i.mean,attributeBuffers:i.attributeBuffers,tightBoundingBox:{min:i.tightBoxMin,max:i.tightBoxMax},indices:s};postMessage(b,i.transferables)}function S(t,e){var r=function(t,e){switch(t.name){case n.POSITION_CARTESIAN:return function(t,e){for(var r=new ArrayBuffer(4*e.numPoints*3),n=new Float32Array(r),i=0;i<e.numPoints;i++){var a=void 0,o=void 0,u=void 0;e.version.newerThan(\\\"1.3\\\")?(a=e.data.getUint32(e.currentOffset+i*e.pointAttributes.byteSize+0)*e.scale,o=e.data.getUint32(e.currentOffset+i*e.pointAttributes.byteSize+4)*e.scale,u=e.data.getUint32(e.currentOffset+i*e.pointAttributes.byteSize+8)*e.scale):(a=e.data.getFloat32(i*e.pointAttributes.byteSize+0)+e.nodeOffset[0],o=e.data.getFloat32(i*e.pointAttributes.byteSize+4)+e.nodeOffset[1],u=e.data.getFloat32(i*e.pointAttributes.byteSize+8)+e.nodeOffset[2]),n[3*i+0]=a,n[3*i+1]=o,n[3*i+2]=u,e.mean[0]+=a/e.numPoints,e.mean[1]+=o/e.numPoints,e.mean[2]+=u/e.numPoints,e.tightBoxMin[0]=Math.min(e.tightBoxMin[0],a),e.tightBoxMin[1]=Math.min(e.tightBoxMin[1],o),e.tightBoxMin[2]=Math.min(e.tightBoxMin[2],u),e.tightBoxMax[0]=Math.max(e.tightBoxMax[0],a),e.tightBoxMax[1]=Math.max(e.tightBoxMax[1],o),e.tightBoxMax[2]=Math.max(e.tightBoxMax[2],u)}return{buffer:r,attribute:t}}(t,e);case n.COLOR_PACKED:return function(t,e){for(var r=new ArrayBuffer(3*e.numPoints),n=new Uint8Array(r),i=0;i<e.numPoints;i++)n[3*i+0]=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize+0),n[3*i+1]=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize+1),n[3*i+2]=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize+2);return{buffer:r,attribute:t}}(t,e);case n.INTENSITY:return function(t,e){for(var r=new ArrayBuffer(4*e.numPoints),n=new Float32Array(r),i=0;i<e.numPoints;i++)n[i]=e.data.getUint16(e.currentOffset+i*e.pointAttributes.byteSize);return{buffer:r,attribute:t}}(t,e);case n.CLASSIFICATION:return function(t,e){for(var r=new ArrayBuffer(e.numPoints),n=new Uint8Array(r),i=0;i<e.numPoints;i++)n[i]=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize);return{buffer:r,attribute:t}}(t,e);case n.NORMAL_SPHEREMAPPED:return function(t,e){for(var r=new ArrayBuffer(4*e.numPoints*3),n=new Float32Array(r),i=0;i<e.numPoints;i++){var a=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize+0),o=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize+1),u=a/255,s=o/255,f=2*u-1,A=2*s-1,O=1,b=f*-f+A*-A+1*O;O=b,f*=Math.sqrt(b),A*=Math.sqrt(b),f*=2,A*=2,O=2*O-1,n[3*i+0]=f,n[3*i+1]=A,n[3*i+2]=O}return{buffer:r,attribute:t}}(t,e);case n.NORMAL_OCT16:return function(t,e){for(var r=new ArrayBuffer(4*e.numPoints*3),n=new Float32Array(r),i=0;i<e.numPoints;i++){var a=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize+0),o=e.data.getUint8(e.currentOffset+i*e.pointAttributes.byteSize+1),u=a/255*2-1,s=o/255*2-1,f=1-Math.abs(u)-Math.abs(s),A=0,O=0;f>=0?(A=u,O=s):(A=-(s/I(s)-1)/I(u),O=-(u/I(u)-1)/I(s));var b=Math.sqrt(A*A+O*O+f*f);A/=b,O/=b,f/=b,n[3*i+0]=A,n[3*i+1]=O,n[3*i+2]=f}return{buffer:r,attribute:t}}(t,e);case n.NORMAL:return function(t,e){for(var r=new ArrayBuffer(4*e.numPoints*3),n=new Float32Array(r),i=0;i<e.numPoints;i++){var a=e.data.getFloat32(e.currentOffset+i*e.pointAttributes.byteSize+0),o=e.data.getFloat32(e.currentOffset+i*e.pointAttributes.byteSize+4),u=e.data.getFloat32(e.currentOffset+i*e.pointAttributes.byteSize+8);n[3*i+0]=a,n[3*i+1]=o,n[3*i+2]=u}return{buffer:r,attribute:t}}(t,e);default:return}}(t,e);void 0!==r&&(e.attributeBuffers[r.attribute.name]=r,e.transferables.push(r.buffer))}}]);\\n//# sourceMappingURL=5be7a8df577399ceb581.worker.js.map\", __webpack_public_path__ + \"5be7a8df577399ceb581.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};","import { Box3, Matrix4, Vector3 } from 'three';\n\nexport enum ClipMode {\n  DISABLED = 0,\n  CLIP_OUTSIDE = 1,\n  HIGHLIGHT_INSIDE = 2,\n}\n\nexport interface IClipBox {\n  box: Box3;\n  inverse: Matrix4;\n  matrix: Matrix4;\n  position: Vector3;\n}\n","export enum PointSizeType {\n  FIXED = 0,\n  ATTENUATED = 1,\n  ADAPTIVE = 2,\n}\n\nexport enum PointShape {\n  SQUARE = 0,\n  CIRCLE = 1,\n  PARABOLOID = 2,\n}\n\nexport enum TreeType {\n  OCTREE = 0,\n  KDTREE = 1,\n}\n\nexport enum PointOpacityType {\n  FIXED = 0,\n  ATTENUATED = 1,\n}\n\nexport enum PointColorType {\n  RGB = 0,\n  COLOR = 1,\n  DEPTH = 2,\n  HEIGHT = 3,\n  ELEVATION = 3,\n  INTENSITY = 4,\n  INTENSITY_GRADIENT = 5,\n  LOD = 6,\n  LEVEL_OF_DETAIL = 6,\n  POINT_INDEX = 7,\n  CLASSIFICATION = 8,\n  RETURN_NUMBER = 9,\n  SOURCE = 10,\n  NORMAL = 11,\n  PHONG = 12,\n  RGB_HEIGHT = 13,\n  COMPOSITE = 50,\n}\n","import { ShaderMaterial, Texture } from 'three';\nimport { IUniform } from './types';\n\n// see http://john-chapman-graphics.blogspot.co.at/2013/01/ssao-tutorial.html\n\nexport interface IBlurMaterialUniforms {\n  [name: string]: IUniform<any>;\n  near: IUniform<number>;\n  far: IUniform<number>;\n  screenWidth: IUniform<number>;\n  screenHeight: IUniform<number>;\n  map: IUniform<Texture | null>;\n}\n\nexport class BlurMaterial extends ShaderMaterial {\n  vertexShader = require('./shaders/blur.vert');\n  fragmentShader = require('./shaders/blur.frag');\n  uniforms: IBlurMaterialUniforms = {\n    near: { type: 'f', value: 0 },\n    far: { type: 'f', value: 0 },\n    screenWidth: { type: 'f', value: 0 },\n    screenHeight: { type: 'f', value: 0 },\n    map: { type: 't', value: null },\n  };\n}\n","export const DEFAULT_RGB_BRIGHTNESS = 0;\nexport const DEFAULT_RGB_CONTRAST = 0;\nexport const DEFAULT_RGB_GAMMA = 1;\nexport const DEFAULT_MAX_POINT_SIZE = 50;\nexport const DEFAULT_MIN_NODE_PIXEL_SIZE = 50;\nexport const DEFAULT_MIN_POINT_SIZE = 2;\nexport const DEFAULT_PICK_WINDOW_SIZE = 15;\nexport const DEFAULT_POINT_BUDGET = 1_000_000;\nexport const MAX_LOADS_TO_GPU = 2;\nexport const MAX_NUM_NODES_LOADING = 4;\nexport const PERSPECTIVE_CAMERA = 'PerspectiveCamera';\n","import { Vector4 } from 'three';\nimport { IClassification } from './types';\n\nexport const DEFAULT_CLASSIFICATION: IClassification = {\n  0: new Vector4(0.5, 0.5, 0.5, 1.0),\n  1: new Vector4(0.5, 0.5, 0.5, 1.0),\n  2: new Vector4(0.63, 0.32, 0.18, 1.0),\n  3: new Vector4(0.0, 1.0, 0.0, 1.0),\n  4: new Vector4(0.0, 0.8, 0.0, 1.0),\n  5: new Vector4(0.0, 0.6, 0.0, 1.0),\n  6: new Vector4(1.0, 0.66, 0.0, 1.0),\n  7: new Vector4(1.0, 0, 1.0, 1.0),\n  8: new Vector4(1.0, 0, 0.0, 1.0),\n  9: new Vector4(0.0, 0.0, 1.0, 1.0),\n  12: new Vector4(1.0, 1.0, 0.0, 1.0),\n  DEFAULT: new Vector4(0.3, 0.6, 0.6, 0.5),\n};\n","import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const GRAYSCALE: IGradient = [[0, new Color(0, 0, 0)], [1, new Color(1, 1, 1)]];\n","import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const INFERNO: IGradient = [\n  [0.0, new Color(0.077, 0.042, 0.206)],\n  [0.1, new Color(0.225, 0.036, 0.388)],\n  [0.2, new Color(0.373, 0.074, 0.432)],\n  [0.3, new Color(0.522, 0.128, 0.42)],\n  [0.4, new Color(0.665, 0.182, 0.37)],\n  [0.5, new Color(0.797, 0.255, 0.287)],\n  [0.6, new Color(0.902, 0.364, 0.184)],\n  [0.7, new Color(0.969, 0.516, 0.063)],\n  [0.8, new Color(0.988, 0.683, 0.072)],\n  [0.9, new Color(0.961, 0.859, 0.298)],\n  [1.0, new Color(0.988, 0.998, 0.645)],\n];\n","import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const PLASMA: IGradient = [\n  [0.0, new Color(0.241, 0.015, 0.61)],\n  [0.1, new Color(0.387, 0.001, 0.654)],\n  [0.2, new Color(0.524, 0.025, 0.653)],\n  [0.3, new Color(0.651, 0.125, 0.596)],\n  [0.4, new Color(0.752, 0.227, 0.513)],\n  [0.5, new Color(0.837, 0.329, 0.431)],\n  [0.6, new Color(0.907, 0.435, 0.353)],\n  [0.7, new Color(0.963, 0.554, 0.272)],\n  [0.8, new Color(0.992, 0.681, 0.195)],\n  [0.9, new Color(0.987, 0.822, 0.144)],\n  [1.0, new Color(0.94, 0.975, 0.131)],\n];\n","import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const RAINBOW: IGradient = [\n  [0, new Color(0.278, 0, 0.714)],\n  [1 / 6, new Color(0, 0, 1)],\n  [2 / 6, new Color(0, 1, 1)],\n  [3 / 6, new Color(0, 1, 0)],\n  [4 / 6, new Color(1, 1, 0)],\n  [5 / 6, new Color(1, 0.64, 0)],\n  [1, new Color(1, 0, 0)],\n];\n","import { Color } from 'three';\nimport { IGradient } from '../types';\n\n// From chroma spectral http://gka.github.io/chroma.js/\nexport const SPECTRAL: IGradient = [\n  [0, new Color(0.3686, 0.3098, 0.6353)],\n  [0.1, new Color(0.1961, 0.5333, 0.7412)],\n  [0.2, new Color(0.4, 0.7608, 0.6471)],\n  [0.3, new Color(0.6706, 0.8667, 0.6431)],\n  [0.4, new Color(0.902, 0.9608, 0.5961)],\n  [0.5, new Color(1.0, 1.0, 0.749)],\n  [0.6, new Color(0.9961, 0.8784, 0.5451)],\n  [0.7, new Color(0.9922, 0.6824, 0.3804)],\n  [0.8, new Color(0.9569, 0.4275, 0.2627)],\n  [0.9, new Color(0.8353, 0.2431, 0.3098)],\n  [1, new Color(0.6196, 0.0039, 0.2588)],\n];\n","import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const VIRIDIS: IGradient = [\n  [0.0, new Color(0.267, 0.005, 0.329)],\n  [0.1, new Color(0.283, 0.141, 0.458)],\n  [0.2, new Color(0.254, 0.265, 0.53)],\n  [0.3, new Color(0.207, 0.372, 0.553)],\n  [0.4, new Color(0.164, 0.471, 0.558)],\n  [0.5, new Color(0.128, 0.567, 0.551)],\n  [0.6, new Color(0.135, 0.659, 0.518)],\n  [0.7, new Color(0.267, 0.749, 0.441)],\n  [0.8, new Color(0.478, 0.821, 0.318)],\n  [0.9, new Color(0.741, 0.873, 0.15)],\n  [1.0, new Color(0.993, 0.906, 0.144)],\n];\n","import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const YELLOW_GREEN: IGradient = [\n  [0, new Color(0.1647, 0.2824, 0.3451)],\n  [0.1, new Color(0.1338, 0.3555, 0.4227)],\n  [0.2, new Color(0.061, 0.4319, 0.4864)],\n  [0.3, new Color(0.0, 0.5099, 0.5319)],\n  [0.4, new Color(0.0, 0.5881, 0.5569)],\n  [0.5, new Color(0.137, 0.665, 0.5614)],\n  [0.6, new Color(0.2906, 0.7395, 0.5477)],\n  [0.7, new Color(0.4453, 0.8099, 0.5201)],\n  [0.8, new Color(0.6102, 0.8748, 0.485)],\n  [0.9, new Color(0.7883, 0.9323, 0.4514)],\n  [1, new Color(0.9804, 0.9804, 0.4314)],\n];\n","import {\n  CanvasTexture,\n  Color,\n  DataTexture,\n  LinearFilter,\n  NearestFilter,\n  RGBAFormat,\n  Texture,\n} from 'three';\nimport { IClassification, IGradient } from '../materials/types';\n\nexport function generateDataTexture(width: number, height: number, color: Color): Texture {\n  const size = width * height;\n  const data = new Uint8Array(4 * size);\n\n  const r = Math.floor(color.r * 255);\n  const g = Math.floor(color.g * 255);\n  const b = Math.floor(color.b * 255);\n\n  for (let i = 0; i < size; i++) {\n    data[i * 3] = r;\n    data[i * 3 + 1] = g;\n    data[i * 3 + 2] = b;\n  }\n\n  const texture = new DataTexture(data, width, height, RGBAFormat);\n  texture.needsUpdate = true;\n  texture.magFilter = NearestFilter;\n\n  return texture;\n}\n\nexport function generateGradientTexture(gradient: IGradient): Texture {\n  const size = 64;\n\n  const canvas = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n\n  const context = canvas.getContext('2d')!;\n\n  context.rect(0, 0, size, size);\n  const ctxGradient = context.createLinearGradient(0, 0, size, size);\n\n  for (let i = 0; i < gradient.length; i++) {\n    const step = gradient[i];\n    ctxGradient.addColorStop(step[0], `#${step[1].getHexString()}`);\n  }\n\n  context.fillStyle = ctxGradient;\n  context.fill();\n\n  const texture = new CanvasTexture(canvas);\n  texture.needsUpdate = true;\n\n  texture.minFilter = LinearFilter;\n  // textureImage = texture.image;\n\n  return texture;\n}\n\nexport function generateClassificationTexture(classification: IClassification): Texture {\n  const width = 256;\n  const height = 256;\n  const size = width * height;\n\n  const data = new Uint8Array(4 * size);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const i = x + width * y;\n\n      let color;\n      if (classification[x]) {\n        color = classification[x];\n      } else if (classification[x % 32]) {\n        color = classification[x % 32];\n      } else {\n        color = classification.DEFAULT;\n      }\n\n      data[4 * i + 0] = 255 * color.x;\n      data[4 * i + 1] = 255 * color.y;\n      data[4 * i + 2] = 255 * color.z;\n      data[4 * i + 3] = 255 * color.w;\n    }\n  }\n\n  const texture = new DataTexture(data, width, height, RGBAFormat);\n  texture.magFilter = NearestFilter;\n  texture.needsUpdate = true;\n\n  return texture;\n}\n","// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\nexport enum PointAttributeName {\n  POSITION_CARTESIAN = 0, // float x, y, z;\n  COLOR_PACKED = 1, // byte r, g, b, a; \tI = [0,1]\n  COLOR_FLOATS_1 = 2, // float r, g, b; \t\tI = [0,1]\n  COLOR_FLOATS_255 = 3, // float r, g, b; \t\tI = [0,255]\n  NORMAL_FLOATS = 4, // float x, y, z;\n  FILLER = 5,\n  INTENSITY = 6,\n  CLASSIFICATION = 7,\n  NORMAL_SPHEREMAPPED = 8,\n  NORMAL_OCT16 = 9,\n  NORMAL = 10,\n}\n\nexport interface PointAttributeType {\n  ordinal: number;\n  size: number;\n}\n\nexport const POINT_ATTRIBUTE_TYPES: Record<string, PointAttributeType> = {\n  DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\n  DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\n  DATA_TYPE_INT8: { ordinal: 2, size: 1 },\n  DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\n  DATA_TYPE_INT16: { ordinal: 4, size: 2 },\n  DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\n  DATA_TYPE_INT32: { ordinal: 6, size: 4 },\n  DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\n  DATA_TYPE_INT64: { ordinal: 8, size: 8 },\n  DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\n};\n\nexport interface IPointAttribute {\n  name: PointAttributeName;\n  type: PointAttributeType;\n  numElements: number;\n  byteSize: number;\n}\n\nexport interface IPointAttributes {\n  attributes: IPointAttribute[];\n  byteSize: number;\n  size: number;\n}\n\nfunction makePointAttribute(\n  name: PointAttributeName,\n  type: PointAttributeType,\n  numElements: number,\n): IPointAttribute {\n  return {\n    name,\n    type,\n    numElements,\n    byteSize: numElements * type.size,\n  };\n}\n\nconst RGBA_PACKED = makePointAttribute(\n  PointAttributeName.COLOR_PACKED,\n  POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\n  4,\n);\n\nexport const POINT_ATTRIBUTES = {\n  POSITION_CARTESIAN: makePointAttribute(\n    PointAttributeName.POSITION_CARTESIAN,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\n    3,\n  ),\n  RGBA_PACKED,\n  COLOR_PACKED: RGBA_PACKED,\n  RGB_PACKED: makePointAttribute(\n    PointAttributeName.COLOR_PACKED,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\n    3,\n  ),\n  NORMAL_FLOATS: makePointAttribute(\n    PointAttributeName.NORMAL_FLOATS,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\n    3,\n  ),\n  FILLER_1B: makePointAttribute(\n    PointAttributeName.FILLER,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    1,\n  ),\n  INTENSITY: makePointAttribute(\n    PointAttributeName.INTENSITY,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16,\n    1,\n  ),\n  CLASSIFICATION: makePointAttribute(\n    PointAttributeName.CLASSIFICATION,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    1,\n  ),\n  NORMAL_SPHEREMAPPED: makePointAttribute(\n    PointAttributeName.NORMAL_SPHEREMAPPED,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    2,\n  ),\n  NORMAL_OCT16: makePointAttribute(\n    PointAttributeName.NORMAL_OCT16,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    2,\n  ),\n  NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n};\n\nexport type PointAttributeStringName = keyof typeof POINT_ATTRIBUTES;\n\nexport class PointAttributes implements IPointAttributes {\n  attributes: IPointAttribute[] = [];\n  byteSize: number = 0;\n  size: number = 0;\n\n  constructor(pointAttributeNames: PointAttributeStringName[] = []) {\n    for (let i = 0; i < pointAttributeNames.length; i++) {\n      const pointAttributeName = pointAttributeNames[i];\n      const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\n      this.attributes.push(pointAttribute);\n      this.byteSize += pointAttribute.byteSize;\n      this.size++;\n    }\n  }\n\n  add(pointAttribute: IPointAttribute): void {\n    this.attributes.push(pointAttribute);\n    this.byteSize += pointAttribute.byteSize;\n    this.size++;\n  }\n\n  hasColors(): boolean {\n    return this.attributes.find(isColorAttribute) !== undefined;\n  }\n\n  hasNormals(): boolean {\n    return this.attributes.find(isNormalAttribute) !== undefined;\n  }\n}\n\nfunction isColorAttribute({ name }: IPointAttribute): boolean {\n  return name === PointAttributeName.COLOR_PACKED;\n}\n\nfunction isNormalAttribute({ name }: IPointAttribute): boolean {\n  return (\n    name === PointAttributeName.NORMAL_SPHEREMAPPED ||\n    name === PointAttributeName.NORMAL_FLOATS ||\n    name === PointAttributeName.NORMAL ||\n    name === PointAttributeName.NORMAL_OCT16\n  );\n}\n","import {\n  AdditiveBlending,\n  Color,\n  LessEqualDepth,\n  NearestFilter,\n  NoBlending,\n  RawShaderMaterial,\n  Texture,\n  VertexColors,\n} from 'three';\nimport {\n  DEFAULT_MAX_POINT_SIZE,\n  DEFAULT_MIN_POINT_SIZE,\n  DEFAULT_RGB_BRIGHTNESS,\n  DEFAULT_RGB_CONTRAST,\n  DEFAULT_RGB_GAMMA,\n} from '../constants';\nimport { DEFAULT_CLASSIFICATION } from './classification';\nimport { ClipMode, IClipBox } from './clipping';\nimport { PointColorType, PointOpacityType, PointShape, PointSizeType, TreeType } from './enums';\nimport { SPECTRAL } from './gradients';\nimport {\n  generateClassificationTexture,\n  generateDataTexture,\n  generateGradientTexture,\n} from './texture-generation';\nimport { IClassification, IGradient, IUniform } from './types';\n\nexport interface IPointCloudMaterialParameters {\n  size: number;\n  minSize: number;\n  maxSize: number;\n  treeType: TreeType;\n}\n\nexport interface IPointCloudMaterialUniforms {\n  bbSize: IUniform<[number, number, number]>;\n  blendDepthSupplement: IUniform<number>;\n  blendHardness: IUniform<number>;\n  classificationLUT: IUniform<Texture>;\n  clipBoxCount: IUniform<number>;\n  clipBoxes: IUniform<Float32Array>;\n  depthMap: IUniform<Texture | null>;\n  diffuse: IUniform<[number, number, number]>;\n  far: IUniform<number>;\n  fov: IUniform<number>;\n  gradient: IUniform<Texture>;\n  heightMax: IUniform<number>;\n  heightMin: IUniform<number>;\n  intensityBrightness: IUniform<number>;\n  intensityContrast: IUniform<number>;\n  intensityGamma: IUniform<number>;\n  intensityRange: IUniform<[number, number]>;\n  level: IUniform<number>;\n  maxSize: IUniform<number>;\n  minSize: IUniform<number>;\n  near: IUniform<number>;\n  octreeSize: IUniform<number>;\n  opacity: IUniform<number>;\n  pcIndex: IUniform<number>;\n  rgbBrightness: IUniform<number>;\n  rgbContrast: IUniform<number>;\n  rgbGamma: IUniform<number>;\n  screenHeight: IUniform<number>;\n  screenWidth: IUniform<number>;\n  size: IUniform<number>;\n  spacing: IUniform<number>;\n  toModel: IUniform<number[]>;\n  transition: IUniform<number>;\n  uColor: IUniform<Color>;\n  visibleNodes: IUniform<Texture>;\n  vnStart: IUniform<number>;\n  wClassification: IUniform<number>;\n  wElevation: IUniform<number>;\n  wIntensity: IUniform<number>;\n  wReturnNumber: IUniform<number>;\n  wRGB: IUniform<number>;\n  wSourceID: IUniform<number>;\n  opacityAttenuation: IUniform<number>;\n  filterByNormalThreshold: IUniform<number>;\n}\n\nconst TREE_TYPE_DEFS = {\n  [TreeType.OCTREE]: 'tree_type_octree',\n  [TreeType.KDTREE]: 'tree_type_kdtree',\n};\n\nconst SIZE_TYPE_DEFS = {\n  [PointSizeType.FIXED]: 'fixed_point_size',\n  [PointSizeType.ATTENUATED]: 'attenuated_point_size',\n  [PointSizeType.ADAPTIVE]: 'adaptive_point_size',\n};\n\nconst OPACITY_DEFS = {\n  [PointOpacityType.ATTENUATED]: 'attenuated_opacity',\n  [PointOpacityType.FIXED]: 'fixed_opacity',\n};\n\nconst SHAPE_DEFS = {\n  [PointShape.SQUARE]: 'square_point_shape',\n  [PointShape.CIRCLE]: 'circle_point_shape',\n  [PointShape.PARABOLOID]: 'paraboloid_point_shape',\n};\n\nconst COLOR_DEFS = {\n  [PointColorType.RGB]: 'color_type_rgb',\n  [PointColorType.COLOR]: 'color_type_color',\n  [PointColorType.DEPTH]: 'color_type_depth',\n  [PointColorType.HEIGHT]: 'color_type_height',\n  [PointColorType.INTENSITY]: 'color_type_intensity',\n  [PointColorType.INTENSITY_GRADIENT]: 'color_type_intensity_gradient',\n  [PointColorType.LOD]: 'color_type_lod',\n  [PointColorType.POINT_INDEX]: 'color_type_point_index',\n  [PointColorType.CLASSIFICATION]: 'color_type_classification',\n  [PointColorType.RETURN_NUMBER]: 'color_type_return_number',\n  [PointColorType.SOURCE]: 'color_type_source',\n  [PointColorType.NORMAL]: 'color_type_normal',\n  [PointColorType.PHONG]: 'color_type_phong',\n  [PointColorType.RGB_HEIGHT]: 'color_type_rgb_height',\n  [PointColorType.COMPOSITE]: 'color_type_composite',\n};\n\nconst CLIP_MODE_DEFS = {\n  [ClipMode.DISABLED]: 'clip_disabled',\n  [ClipMode.CLIP_OUTSIDE]: 'clip_outside',\n  [ClipMode.HIGHLIGHT_INSIDE]: 'clip_highlight_inside',\n};\n\nexport class PointCloudMaterial extends RawShaderMaterial {\n  lights = false;\n  fog = false;\n  numClipBoxes: number = 0;\n  clipBoxes: IClipBox[] = [];\n  readonly visibleNodesTexture: Texture;\n\n  private _gradient = SPECTRAL;\n  private gradientTexture = generateGradientTexture(this._gradient);\n\n  private _classification: IClassification = DEFAULT_CLASSIFICATION;\n  private classificationTexture: Texture = generateClassificationTexture(this._classification);\n\n  uniforms: IPointCloudMaterialUniforms & Record<string, IUniform<any>> = {\n    bbSize: makeUniform('fv', [0, 0, 0] as [number, number, number]),\n    blendDepthSupplement: makeUniform('f', 0.0),\n    blendHardness: makeUniform('f', 2.0),\n    classificationLUT: makeUniform('t', this.classificationTexture),\n    clipBoxCount: makeUniform('f', 0),\n    clipBoxes: makeUniform('Matrix4fv', [] as any),\n    depthMap: makeUniform('t', null),\n    diffuse: makeUniform('fv', [1, 1, 1] as [number, number, number]),\n    far: makeUniform('f', 1.0),\n    fov: makeUniform('f', 1.0),\n    gradient: makeUniform('t', this.gradientTexture),\n    heightMax: makeUniform('f', 1.0),\n    heightMin: makeUniform('f', 0.0),\n    intensityBrightness: makeUniform('f', 0),\n    intensityContrast: makeUniform('f', 0),\n    intensityGamma: makeUniform('f', 1),\n    intensityRange: makeUniform('fv', [0, 65000] as [number, number]),\n    isLeafNode: makeUniform('b', 0),\n    level: makeUniform('f', 0.0),\n    maxSize: makeUniform('f', DEFAULT_MAX_POINT_SIZE),\n    minSize: makeUniform('f', DEFAULT_MIN_POINT_SIZE),\n    near: makeUniform('f', 0.1),\n    octreeSize: makeUniform('f', 0),\n    opacity: makeUniform('f', 1.0),\n    pcIndex: makeUniform('f', 0),\n    rgbBrightness: makeUniform('f', DEFAULT_RGB_BRIGHTNESS),\n    rgbContrast: makeUniform('f', DEFAULT_RGB_CONTRAST),\n    rgbGamma: makeUniform('f', DEFAULT_RGB_GAMMA),\n    screenHeight: makeUniform('f', 1.0),\n    screenWidth: makeUniform('f', 1.0),\n    size: makeUniform('f', 1),\n    spacing: makeUniform('f', 1.0),\n    toModel: makeUniform('Matrix4f', []),\n    transition: makeUniform('f', 0.5),\n    uColor: makeUniform('c', new Color(0xffffff)),\n    visibleNodes: makeUniform('t', this.visibleNodesTexture),\n    vnStart: makeUniform('f', 0.0),\n    wClassification: makeUniform('f', 0),\n    wElevation: makeUniform('f', 0),\n    wIntensity: makeUniform('f', 0),\n    wReturnNumber: makeUniform('f', 0),\n    wRGB: makeUniform('f', 1),\n    wSourceID: makeUniform('f', 0),\n    opacityAttenuation: makeUniform('f', 1),\n    filterByNormalThreshold: makeUniform('f', 0),\n  };\n\n  @uniform('bbSize') bbSize!: [number, number, number]; // prettier-ignore\n  @uniform('depthMap') depthMap!: Texture | null; // prettier-ignore\n  @uniform('far') far!: number; // prettier-ignore\n  @uniform('fov') fov!: number; // prettier-ignore\n  @uniform('heightMax') heightMax!: number; // prettier-ignore\n  @uniform('heightMin') heightMin!: number; // prettier-ignore\n  @uniform('intensityBrightness') intensityBrightness!: number; // prettier-ignore\n  @uniform('intensityContrast') intensityContrast!: number; // prettier-ignore\n  @uniform('intensityGamma') intensityGamma!: number; // prettier-ignore\n  @uniform('intensityRange') intensityRange!: [number, number]; // prettier-ignore\n  @uniform('maxSize') maxSize!: number; // prettier-ignore\n  @uniform('minSize') minSize!: number; // prettier-ignore\n  @uniform('near') near!: number; // prettier-ignore\n  @uniform('opacity', true) opacity!: number; // prettier-ignore\n  @uniform('rgbBrightness', true) rgbBrightness!: number; // prettier-ignore\n  @uniform('rgbContrast', true) rgbContrast!: number; // prettier-ignore\n  @uniform('rgbGamma', true) rgbGamma!: number; // prettier-ignore\n  @uniform('screenHeight') screenHeight!: number; // prettier-ignore\n  @uniform('screenWidth') screenWidth!: number; // prettier-ignore\n  @uniform('size') size!: number; // prettier-ignore\n  @uniform('spacing') spacing!: number; // prettier-ignore\n  @uniform('transition') transition!: number; // prettier-ignore\n  @uniform('uColor') color!: Color; // prettier-ignore\n  @uniform('wClassification') weightClassification!: number; // prettier-ignore\n  @uniform('wElevation') weightElevation!: number; // prettier-ignore\n  @uniform('wIntensity') weightIntensity!: number; // prettier-ignore\n  @uniform('wReturnNumber') weightReturnNumber!: number; // prettier-ignore\n  @uniform('wRGB') weightRGB!: number; // prettier-ignore\n  @uniform('wSourceID') weightSourceID!: number; // prettier-ignore\n  @uniform('opacityAttenuation') opacityAttenuation!: number; // prettier-ignore\n  @uniform('filterByNormalThreshold') filterByNormalThreshold!: number; // prettier-ignore\n\n  @requiresShaderUpdate() useClipBox: boolean = false; // prettier-ignore\n  @requiresShaderUpdate() weighted: boolean = false; // prettier-ignore\n  @requiresShaderUpdate() pointColorType: PointColorType = PointColorType.RGB; // prettier-ignore\n  @requiresShaderUpdate() pointSizeType: PointSizeType = PointSizeType.ADAPTIVE; // prettier-ignore\n  @requiresShaderUpdate() clipMode: ClipMode = ClipMode.DISABLED; // prettier-ignore\n  @requiresShaderUpdate() useEDL: boolean = false; // prettier-ignore\n  @requiresShaderUpdate() shape: PointShape = PointShape.SQUARE; // prettier-ignore\n  @requiresShaderUpdate() treeType: TreeType = TreeType.OCTREE; // prettier-ignore\n  @requiresShaderUpdate() pointOpacityType: PointOpacityType = PointOpacityType.FIXED; // prettier-ignore\n  @requiresShaderUpdate() useFilterByNormal: boolean = false; // prettier-ignore\n\n  attributes = {\n    position: { type: 'fv', value: [] },\n    color: { type: 'fv', value: [] },\n    normal: { type: 'fv', value: [] },\n    intensity: { type: 'f', value: [] },\n    classification: { type: 'f', value: [] },\n    returnNumber: { type: 'f', value: [] },\n    numberOfReturns: { type: 'f', value: [] },\n    pointSourceID: { type: 'f', value: [] },\n    indices: { type: 'fv', value: [] },\n  };\n\n  constructor(parameters: Partial<IPointCloudMaterialParameters> = {}) {\n    super();\n\n    const tex = (this.visibleNodesTexture = generateDataTexture(2048, 1, new Color(0xffffff)));\n    tex.minFilter = NearestFilter;\n    tex.magFilter = NearestFilter;\n    this.setUniform('visibleNodes', tex);\n\n    this.treeType = getValid(parameters.treeType, TreeType.OCTREE);\n    this.size = getValid(parameters.size, 1.0);\n    this.minSize = getValid(parameters.minSize, 2.0);\n    this.maxSize = getValid(parameters.maxSize, 50.0);\n\n    this.classification = DEFAULT_CLASSIFICATION;\n\n    this.defaultAttributeValues.normal = [0, 0, 0];\n    this.defaultAttributeValues.classification = [0, 0, 0];\n    this.defaultAttributeValues.indices = [0, 0, 0, 0];\n\n    this.vertexColors = VertexColors;\n\n    this.updateShaderSource();\n  }\n\n  updateShaderSource() {\n    this.vertexShader = this.applyDefines(require('./shaders/pointcloud.vert').default);\n    this.fragmentShader = this.applyDefines(require('./shaders/pointcloud.frag').default);\n\n    if (this.opacity === 1.0) {\n      this.blending = NoBlending;\n      this.transparent = false;\n      this.depthTest = true;\n      this.depthWrite = true;\n      this.depthFunc = LessEqualDepth;\n    } else if (this.opacity < 1.0 && !this.useEDL) {\n      this.blending = AdditiveBlending;\n      this.transparent = true;\n      this.depthTest = false;\n      this.depthWrite = true;\n    }\n\n    if (this.weighted) {\n      this.blending = AdditiveBlending;\n      this.transparent = true;\n      this.depthTest = true;\n      this.depthWrite = false;\n      this.depthFunc = LessEqualDepth;\n    }\n\n    this.needsUpdate = true;\n  }\n\n  applyDefines(shaderSrc: string): string {\n    const parts: string[] = [];\n\n    function define(value: string | undefined) {\n      if (value) {\n        parts.push(`#define ${value}`);\n      }\n    }\n\n    define(TREE_TYPE_DEFS[this.treeType]);\n    define(SIZE_TYPE_DEFS[this.pointSizeType]);\n    define(SHAPE_DEFS[this.shape]);\n    define(COLOR_DEFS[this.pointColorType]);\n    define(CLIP_MODE_DEFS[this.clipMode]);\n    define(OPACITY_DEFS[this.pointOpacityType]);\n\n    // We only perform gamma and brightness/contrast calculations per point if values are specified.\n    if (\n      this.rgbGamma !== DEFAULT_RGB_GAMMA ||\n      this.rgbBrightness !== DEFAULT_RGB_BRIGHTNESS ||\n      this.rgbContrast !== DEFAULT_RGB_CONTRAST\n    ) {\n      define('use_rgb_gamma_contrast_brightness');\n    }\n\n    if (this.useFilterByNormal) {\n      define('use_filter_by_normal');\n    }\n\n    if (this.useEDL) {\n      define('use_edl');\n    }\n\n    if (this.weighted) {\n      define('weighted_splats');\n    }\n\n    if (this.numClipBoxes > 0) {\n      define('use_clip_box');\n    }\n\n    define('MAX_POINT_LIGHTS 0');\n    define('MAX_DIR_LIGHTS 0');\n\n    parts.push(shaderSrc);\n\n    return parts.join('\\n');\n  }\n\n  setClipBoxes(clipBoxes: IClipBox[]): void {\n    if (!clipBoxes) {\n      return;\n    }\n\n    this.clipBoxes = clipBoxes;\n\n    const doUpdate =\n      this.numClipBoxes !== clipBoxes.length && (clipBoxes.length === 0 || this.numClipBoxes === 0);\n\n    this.numClipBoxes = clipBoxes.length;\n    this.setUniform('clipBoxCount', this.numClipBoxes);\n\n    if (doUpdate) {\n      this.updateShaderSource();\n    }\n\n    const clipBoxesLength = this.numClipBoxes * 16;\n    const clipBoxesArray = new Float32Array(clipBoxesLength);\n\n    for (let i = 0; i < this.numClipBoxes; i++) {\n      clipBoxesArray.set(clipBoxes[i].inverse.elements, 16 * i);\n    }\n\n    for (let i = 0; i < clipBoxesLength; i++) {\n      if (isNaN(clipBoxesArray[i])) {\n        clipBoxesArray[i] = Infinity;\n      }\n    }\n\n    this.setUniform('clipBoxes', clipBoxesArray);\n  }\n\n  get gradient(): IGradient {\n    return this._gradient;\n  }\n\n  set gradient(value: IGradient) {\n    if (this._gradient !== value) {\n      this._gradient = value;\n      this.gradientTexture = generateGradientTexture(this._gradient);\n      this.setUniform('gradient', this.gradientTexture);\n    }\n  }\n\n  get classification(): IClassification {\n    return this._classification;\n  }\n\n  set classification(value: IClassification) {\n    const copy: IClassification = {} as any;\n    for (const key of Object.keys(value)) {\n      copy[key] = value[key].clone();\n    }\n\n    let isEqual = false;\n    if (this._classification === undefined) {\n      isEqual = false;\n    } else {\n      isEqual = Object.keys(copy).length === Object.keys(this._classification).length;\n\n      for (const key of Object.keys(copy)) {\n        isEqual = isEqual && this._classification[key] !== undefined;\n        isEqual = isEqual && copy[key].equals(this._classification[key]);\n      }\n    }\n\n    if (!isEqual) {\n      this._classification = copy;\n      this.recomputeClassification();\n    }\n  }\n\n  private recomputeClassification(): void {\n    this.classificationTexture = generateClassificationTexture(this._classification);\n    this.setUniform('classificationLUT', this.classificationTexture);\n  }\n\n  get elevationRange(): [number, number] {\n    return [this.heightMin, this.heightMax];\n  }\n\n  set elevationRange(value: [number, number]) {\n    this.heightMin = value[0];\n    this.heightMax = value[1];\n  }\n\n  getUniform<K extends keyof IPointCloudMaterialUniforms>(\n    name: K,\n  ): IPointCloudMaterialUniforms[K]['value'] {\n    return this.uniforms === undefined ? (undefined as any) : this.uniforms[name].value;\n  }\n\n  setUniform<K extends keyof IPointCloudMaterialUniforms>(\n    name: K,\n    value: IPointCloudMaterialUniforms[K]['value'],\n  ): void {\n    if (this.uniforms === undefined) {\n      return;\n    }\n\n    const uObj = this.uniforms[name];\n\n    if (uObj.type === 'c') {\n      (uObj.value as Color).copy(value as Color);\n    } else if (value !== uObj.value) {\n      uObj.value = value;\n    }\n  }\n}\n\nfunction makeUniform<T>(type: string, value: T): IUniform<T> {\n  return { type, value };\n}\n\nfunction getValid<T>(a: T | undefined, b: T): T {\n  return a === undefined ? b : a;\n}\n\n// tslint:disable:no-invalid-this\nfunction uniform<K extends keyof IPointCloudMaterialUniforms>(\n  uniformName: K,\n  requireSrcUpdate: boolean = false,\n): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol): void => {\n    Object.defineProperty(target, propertyKey, {\n      get() {\n        return this.getUniform(uniformName);\n      },\n      set(value: any) {\n        if (value !== this.getUniform(uniformName)) {\n          this.setUniform(uniformName, value);\n          if (requireSrcUpdate) {\n            this.updateShaderSource();\n          }\n        }\n      },\n    });\n  };\n}\n\nfunction requiresShaderUpdate() {\n  return (target: Object, propertyKey: string | symbol): void => {\n    const fieldName = `_${propertyKey.toString()}`;\n\n    Object.defineProperty(target, propertyKey, {\n      get() {\n        return this[fieldName];\n      },\n      set(value: any) {\n        if (value !== this[fieldName]) {\n          this[fieldName] = value;\n          this.updateShaderSource();\n        }\n      },\n    });\n  };\n}\n","import { Box3, Matrix4, Vector3 } from 'three';\n\n/**\n * adapted from mhluska at https://github.com/mrdoob/three.js/issues/1561\n */\nexport function computeTransformedBoundingBox(box: Box3, transform: Matrix4): Box3 {\n  return new Box3().setFromPoints([\n    new Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.min.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.max.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.min.y, box.max.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.max.y, box.max.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.max.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.min.y, box.max.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.max.y, box.max.z).applyMatrix4(transform),\n  ]);\n}\n\nexport function createChildAABB(aabb: Box3, index: number): Box3 {\n  const min = aabb.min.clone();\n  const max = aabb.max.clone();\n  const size = new Vector3().subVectors(max, min);\n\n  // tslint:disable-next-line:no-bitwise\n  if ((index & 0b0001) > 0) {\n    min.z += size.z / 2;\n  } else {\n    max.z -= size.z / 2;\n  }\n\n  // tslint:disable-next-line:no-bitwise\n  if ((index & 0b0010) > 0) {\n    min.y += size.y / 2;\n  } else {\n    max.y -= size.y / 2;\n  }\n\n  // tslint:disable-next-line:no-bitwise\n  if ((index & 0b0100) > 0) {\n    min.x += size.x / 2;\n  } else {\n    max.x -= size.x / 2;\n  }\n\n  return new Box3(min, max);\n}\n","import { IPointCloudTreeNode } from '../types';\n\nexport function getIndexFromName(name: string) {\n  return parseInt(name.charAt(name.length - 1), 10);\n}\n\n/**\n * When passed to `[].sort`, sorts the array by level and index: r, r0, r3, r4, r01, r07, r30, ...\n */\nexport function byLevelAndIndex(a: IPointCloudTreeNode, b: IPointCloudTreeNode) {\n  const na = a.name;\n  const nb = b.name;\n  if (na.length !== nb.length) {\n    return na.length - nb.length;\n  } else if (na < nb) {\n    return -1;\n  } else if (na > nb) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n","/**\n * Adapted from Potree.js http://potree.org\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\n */\n\nimport { Box3, BufferGeometry, EventDispatcher, Sphere, Vector3 } from 'three';\nimport { PointCloudOctreeGeometry } from './point-cloud-octree-geometry';\nimport { IPointCloudTreeNode } from './types';\nimport { createChildAABB } from './utils/bounds';\nimport { getIndexFromName } from './utils/utils';\n\nexport interface NodeData {\n  children: number;\n  numPoints: number;\n  name: string;\n}\n\nconst NODE_STRIDE = 5;\n\nexport class PointCloudOctreeGeometryNode extends EventDispatcher implements IPointCloudTreeNode {\n  id: number = PointCloudOctreeGeometryNode.idCount++;\n  name: string;\n  pcoGeometry: PointCloudOctreeGeometry;\n  index: number;\n  level: number = 0;\n  spacing: number = 0;\n  hasChildren: boolean = false;\n  readonly children: ReadonlyArray<PointCloudOctreeGeometryNode | null> = [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n  ];\n  boundingBox: Box3;\n  tightBoundingBox: Box3;\n  boundingSphere: Sphere;\n  mean: Vector3 = new Vector3();\n  numPoints: number = 0;\n  geometry: BufferGeometry = new BufferGeometry();\n  loaded: boolean = false;\n  loading: boolean = false;\n  failed: boolean = false;\n  parent: PointCloudOctreeGeometryNode | null = null;\n  oneTimeDisposeHandlers: (() => void)[] = [];\n  isLeafNode: boolean = true;\n  readonly isTreeNode: boolean = false;\n  readonly isGeometryNode: boolean = true;\n\n  private static idCount = 0;\n\n  constructor(name: string, pcoGeometry: PointCloudOctreeGeometry, boundingBox: Box3) {\n    super();\n\n    this.name = name;\n    this.index = getIndexFromName(name);\n    this.pcoGeometry = pcoGeometry;\n    this.boundingBox = boundingBox;\n    this.tightBoundingBox = boundingBox.clone();\n    this.boundingSphere = boundingBox.getBoundingSphere(new Sphere());\n  }\n\n  dispose(): void {\n    if (!this.geometry || !this.parent) {\n      return;\n    }\n\n    this.geometry.dispose();\n    this.geometry = new BufferGeometry();\n    this.loaded = false;\n\n    this.oneTimeDisposeHandlers.forEach(handler => handler());\n    this.oneTimeDisposeHandlers = [];\n  }\n\n  /**\n   * Gets the url of the binary file for this node.\n   */\n  getUrl(): string {\n    const geometry = this.pcoGeometry;\n    const version = geometry.loader.version;\n    const pathParts = [geometry.octreeDir];\n\n    if (geometry.loader && version.equalOrHigher('1.5')) {\n      pathParts.push(this.getHierarchyBaseUrl());\n      pathParts.push(this.name);\n    } else if (version.equalOrHigher('1.4')) {\n      pathParts.push(this.name);\n    } else if (version.upTo('1.3')) {\n      pathParts.push(this.name);\n    }\n\n    return pathParts.join('/');\n  }\n\n  /**\n   * Gets the url of the hierarchy file for this node.\n   */\n  getHierarchyUrl(): string {\n    return `${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`;\n  }\n\n  /**\n   * Adds the specified node as a child of the current node.\n   *\n   * @param child\n   *    The node which is to be added as a child.\n   */\n  addChild(child: PointCloudOctreeGeometryNode): void {\n    (this.children as any)[child.index] = child;\n    this.isLeafNode = false;\n    child.parent = this;\n  }\n\n  /**\n   * Calls the specified callback for the current node (if includeSelf is set to true) and all its\n   * children.\n   *\n   * @param cb\n   *    The function which is to be called for each node.\n   */\n  traverse(cb: (node: PointCloudOctreeGeometryNode) => void, includeSelf = true): void {\n    const stack: PointCloudOctreeGeometryNode[] = includeSelf ? [this] : [];\n\n    let current: PointCloudOctreeGeometryNode | undefined;\n\n    while ((current = stack.pop()) !== undefined) {\n      cb(current);\n\n      for (const child of current.children) {\n        if (child !== null) {\n          stack.push(child);\n        }\n      }\n    }\n  }\n\n  load(): Promise<void> {\n    if (!this.canLoad()) {\n      return Promise.resolve();\n    }\n\n    this.loading = true;\n    this.pcoGeometry.numNodesLoading++;\n    this.pcoGeometry.needsUpdate = true;\n\n    let promise: Promise<void>;\n\n    if (\n      this.pcoGeometry.loader.version.equalOrHigher('1.5') &&\n      this.level % this.pcoGeometry.hierarchyStepSize === 0 &&\n      this.hasChildren\n    ) {\n      promise = this.loadHierachyThenPoints();\n    } else {\n      promise = this.loadPoints();\n    }\n\n    return promise.catch(reason => {\n      this.loading = false;\n      this.failed = true;\n      this.pcoGeometry.numNodesLoading--;\n      throw reason;\n    });\n  }\n\n  private canLoad(): boolean {\n    return (\n      !this.loading &&\n      !this.loaded &&\n      !this.pcoGeometry.disposed &&\n      !this.pcoGeometry.loader.disposed &&\n      this.pcoGeometry.numNodesLoading < this.pcoGeometry.maxNumNodesLoading\n    );\n  }\n\n  private loadPoints(): Promise<void> {\n    this.pcoGeometry.needsUpdate = true;\n    return this.pcoGeometry.loader.load(this);\n  }\n\n  private loadHierachyThenPoints(): Promise<any> {\n    if (this.level % this.pcoGeometry.hierarchyStepSize !== 0) {\n      return Promise.resolve();\n    }\n\n    return Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl()))\n      .then(url => this.pcoGeometry.xhrRequest(url, { mode: 'cors' }))\n      .then(res => res.arrayBuffer())\n      .then(data => this.loadHierarchy(this, data));\n  }\n\n  /**\n   * Gets the url of the folder where the hierarchy is, relative to the octreeDir.\n   */\n  private getHierarchyBaseUrl(): string {\n    const hierarchyStepSize = this.pcoGeometry.hierarchyStepSize;\n    const indices = this.name.substr(1);\n    const numParts = Math.floor(indices.length / hierarchyStepSize);\n\n    let path = 'r/';\n    for (let i = 0; i < numParts; i++) {\n      path += `${indices.substr(i * hierarchyStepSize, hierarchyStepSize)}/`;\n    }\n\n    return path.slice(0, -1);\n  }\n\n  // tslint:disable:no-bitwise\n  private loadHierarchy(node: PointCloudOctreeGeometryNode, buffer: ArrayBuffer) {\n    const view = new DataView(buffer);\n\n    const firstNodeData = this.getNodeData(node.name, 0, view);\n    node.numPoints = firstNodeData.numPoints;\n\n    // Nodes which need be visited.\n    const stack: NodeData[] = [firstNodeData];\n    // Nodes which have already been decoded. We will take nodes from the stack and place them here.\n    const decoded: NodeData[] = [];\n\n    let offset = NODE_STRIDE;\n    while (stack.length > 0) {\n      const stackNodeData = stack.shift()!;\n\n      // From the last bit, all the way to the 8th one from the right.\n      let mask = 1;\n      for (let i = 0; i < 8 && offset + 1 < buffer.byteLength; i++) {\n        if ((stackNodeData.children & mask) !== 0) {\n          const nodeData = this.getNodeData(stackNodeData.name + i, offset, view);\n\n          decoded.push(nodeData); // Node is decoded.\n          stack.push(nodeData); // Need to check its children.\n\n          offset += NODE_STRIDE; // Move over to the next node in the buffer.\n        }\n\n        mask = mask * 2;\n      }\n    }\n\n    node.pcoGeometry.needsUpdate = true;\n\n    // Map containing all the nodes.\n    const nodes = new Map<string, PointCloudOctreeGeometryNode>();\n    nodes.set(node.name, node);\n    decoded.forEach(nodeData => this.addNode(nodeData, node.pcoGeometry, nodes));\n\n    node.loadPoints();\n  }\n\n  // tslint:enable:no-bitwise\n\n  private getNodeData(name: string, offset: number, view: DataView): NodeData {\n    const children = view.getUint8(offset);\n    const numPoints = view.getUint32(offset + 1, true);\n    return { children: children, numPoints: numPoints, name };\n  }\n\n  addNode(\n    { name, numPoints, children }: NodeData,\n    pco: PointCloudOctreeGeometry,\n    nodes: Map<string, PointCloudOctreeGeometryNode>,\n  ): void {\n    const index = getIndexFromName(name);\n    const parentName = name.substring(0, name.length - 1);\n    const parentNode = nodes.get(parentName)!;\n    const level = name.length - 1;\n    const boundingBox = createChildAABB(parentNode.boundingBox, index);\n\n    const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n    node.level = level;\n    node.numPoints = numPoints;\n    node.hasChildren = children > 0;\n    node.spacing = pco.spacing / Math.pow(2, level);\n\n    parentNode.addChild(node);\n    nodes.set(name, node);\n  }\n}\n","import { Box3, Vector3 } from 'three';\nimport { BinaryLoader, XhrRequest } from './loading';\nimport { PointAttributes } from './point-attributes';\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\n\nexport class PointCloudOctreeGeometry {\n  disposed: boolean = false;\n  needsUpdate: boolean = true;\n  root!: PointCloudOctreeGeometryNode;\n  octreeDir: string = '';\n  hierarchyStepSize: number = -1;\n  nodes: Record<string, PointCloudOctreeGeometryNode> = {};\n  numNodesLoading: number = 0;\n  maxNumNodesLoading: number = 3;\n  spacing: number = 0;\n  pointAttributes: PointAttributes = new PointAttributes([]);\n  projection: any = null;\n  url: string | null = null;\n\n  constructor(\n    public loader: BinaryLoader,\n    public boundingBox: Box3,\n    public tightBoundingBox: Box3,\n    public offset: Vector3,\n    public xhrRequest: XhrRequest,\n  ) {}\n\n  dispose(): void {\n    this.loader.dispose();\n    this.root.traverse(node => node.dispose());\n\n    this.disposed = true;\n  }\n\n  addNodeLoadedCallback(callback: (node: PointCloudOctreeGeometryNode) => void): void {\n    this.loader.callbacks.push(callback);\n  }\n\n  clearNodeLoadedCallbacks(): void {\n    this.loader.callbacks = [];\n  }\n}\n","import { Box3, EventDispatcher, Object3D, Points, Sphere } from 'three';\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\nimport { IPointCloudTreeNode } from './types';\n\nexport class PointCloudOctreeNode extends EventDispatcher implements IPointCloudTreeNode {\n  geometryNode: PointCloudOctreeGeometryNode;\n  sceneNode: Points;\n  pcIndex: number | undefined = undefined;\n  boundingBoxNode: Object3D | null = null;\n  readonly children: (IPointCloudTreeNode | null)[];\n  readonly loaded = true;\n  readonly isTreeNode: boolean = true;\n  readonly isGeometryNode: boolean = false;\n\n  constructor(geometryNode: PointCloudOctreeGeometryNode, sceneNode: Points) {\n    super();\n\n    this.geometryNode = geometryNode;\n    this.sceneNode = sceneNode;\n    this.children = geometryNode.children.slice();\n  }\n\n  dispose(): void {\n    this.geometryNode.dispose();\n  }\n\n  traverse(cb: (node: IPointCloudTreeNode) => void, includeSelf?: boolean): void {\n    this.geometryNode.traverse(cb, includeSelf);\n  }\n\n  get id() {\n    return this.geometryNode.id;\n  }\n\n  get name() {\n    return this.geometryNode.name;\n  }\n\n  get level(): number {\n    return this.geometryNode.level;\n  }\n\n  get isLeafNode(): boolean {\n    return this.geometryNode.isLeafNode;\n  }\n\n  get numPoints(): number {\n    return this.geometryNode.numPoints;\n  }\n\n  get index() {\n    return this.geometryNode.index;\n  }\n\n  get boundingSphere(): Sphere {\n    return this.geometryNode.boundingSphere;\n  }\n\n  get boundingBox(): Box3 {\n    return this.geometryNode.boundingBox;\n  }\n\n  get spacing() {\n    return this.geometryNode.spacing;\n  }\n}\n","import { Object3D } from 'three';\nimport { IPointCloudTreeNode } from './types';\n\nexport class PointCloudTree extends Object3D {\n  root: IPointCloudTreeNode | null = null;\n\n  initialized() {\n    return this.root !== null;\n  }\n}\n","export function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(min, value), max);\n}\n","import {\n  Box3,\n  BufferAttribute,\n  BufferGeometry,\n  Camera,\n  Geometry,\n  LinearFilter,\n  Material,\n  Matrix4,\n  NearestFilter,\n  NoBlending,\n  Object3D,\n  PerspectiveCamera,\n  Points,\n  Ray,\n  RGBAFormat,\n  Scene,\n  Sphere,\n  Vector3,\n  Vector4,\n  WebGLRenderer,\n  WebGLRenderTarget,\n} from 'three';\nimport { DEFAULT_MIN_NODE_PIXEL_SIZE, DEFAULT_PICK_WINDOW_SIZE } from './constants';\nimport { ClipMode, PointCloudMaterial, PointColorType, PointSizeType } from './materials';\nimport { PointCloudOctreeGeometry } from './point-cloud-octree-geometry';\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\nimport { PointCloudOctreeNode } from './point-cloud-octree-node';\nimport { PointCloudTree } from './point-cloud-tree';\nimport { IPointCloudTreeNode, IPotree, PickPoint, PointCloudHit } from './types';\nimport { computeTransformedBoundingBox } from './utils/bounds';\nimport { clamp } from './utils/math';\nimport { byLevelAndIndex } from './utils/utils';\n\nexport interface PickParams {\n  pickWindowSize: number;\n  pickOutsideClipRegion: boolean;\n  /**\n   * If provided, the picking will use this pixel position instead of the `Ray` passed to the `pick`\n   * method.\n   */\n  pixelPosition: Vector3;\n  /**\n   * Function which gets called after a picking material has been created and setup and before the\n   * point cloud is rendered into the picking render target. This gives applications a chance to\n   * customize the renderTarget and the material.\n   *\n   * @param material\n   *    The pick material.\n   * @param renterTarget\n   *    The render target used for picking.\n   */\n  onBeforePickRender: (material: PointCloudMaterial, renterTarget: WebGLRenderTarget) => void;\n}\n\ninterface IPickState {\n  renderTarget: WebGLRenderTarget;\n  material: PointCloudMaterial;\n  scene: Scene;\n}\n\nconst helperVec3 = new Vector3();\n\nexport class PointCloudOctree extends PointCloudTree {\n  potree: IPotree;\n  disposed: boolean = false;\n  pcoGeometry: PointCloudOctreeGeometry;\n  boundingBox: Box3;\n  boundingSphere: Sphere;\n  material: PointCloudMaterial;\n  level: number = 0;\n  maxLevel: number = Infinity;\n  /**\n   * The minimum radius of a node's bounding sphere on the screen in order to be displayed.\n   */\n  minNodePixelSize: number = DEFAULT_MIN_NODE_PIXEL_SIZE;\n  root: IPointCloudTreeNode | null = null;\n  boundingBoxNodes: Object3D[] = [];\n  visibleNodes: PointCloudOctreeNode[] = [];\n  visibleGeometry: PointCloudOctreeGeometryNode[] = [];\n  numVisiblePoints: number = 0;\n  showBoundingBox: boolean = false;\n  private visibleBounds: Box3 = new Box3();\n  private visibleNodeTextureOffsets = new Map<string, number>();\n  private pickState: IPickState | undefined;\n\n  constructor(\n    potree: IPotree,\n    pcoGeometry: PointCloudOctreeGeometry,\n    material?: PointCloudMaterial,\n  ) {\n    super();\n\n    this.name = '';\n    this.potree = potree;\n    this.root = pcoGeometry.root;\n    this.pcoGeometry = pcoGeometry;\n    this.boundingBox = pcoGeometry.boundingBox;\n    this.boundingSphere = this.boundingBox.getBoundingSphere(new Sphere());\n\n    this.position.copy(pcoGeometry.offset);\n    this.updateMatrix();\n\n    this.material = material || new PointCloudMaterial();\n    this.initMaterial(this.material);\n  }\n\n  private initMaterial(material: PointCloudMaterial): void {\n    this.updateMatrixWorld(true);\n\n    const { min, max } = computeTransformedBoundingBox(\n      this.pcoGeometry.tightBoundingBox || this.getBoundingBoxWorld(),\n      this.matrixWorld,\n    );\n\n    const bWidth = max.z - min.z;\n    material.heightMin = min.z - 0.2 * bWidth;\n    material.heightMax = max.z + 0.2 * bWidth;\n  }\n\n  dispose(): void {\n    if (this.root) {\n      this.root.dispose();\n    }\n\n    this.pcoGeometry.dispose();\n    this.material.dispose();\n\n    this.visibleNodes = [];\n    this.visibleGeometry = [];\n    this.visibleNodeTextureOffsets.clear();\n\n    if (this.pickState) {\n      this.pickState.material.dispose();\n      this.pickState.renderTarget.dispose();\n      this.pickState = undefined;\n    }\n\n    this.disposed = false;\n  }\n\n  get pointSizeType(): PointSizeType {\n    return this.material.pointSizeType;\n  }\n\n  set pointSizeType(value: PointSizeType) {\n    this.material.pointSizeType = value;\n  }\n\n  toTreeNode(\n    geometryNode: PointCloudOctreeGeometryNode,\n    parent?: PointCloudOctreeNode | null,\n  ): PointCloudOctreeNode {\n    const sceneNode = new Points(geometryNode.geometry, this.material);\n    const node = new PointCloudOctreeNode(geometryNode, sceneNode);\n    sceneNode.name = geometryNode.name;\n    sceneNode.position.copy(geometryNode.boundingBox.min);\n    sceneNode.frustumCulled = false;\n    sceneNode.onBeforeRender = this.makeOnBeforeRender(node);\n\n    if (parent) {\n      parent.sceneNode.add(sceneNode);\n      parent.children[geometryNode.index] = node;\n\n      geometryNode.oneTimeDisposeHandlers.push(() => {\n        parent.sceneNode.remove(node.sceneNode);\n        // Replace the tree node (rendered and in the GPU) with the geometry node.\n        parent.children[geometryNode.index] = geometryNode;\n      });\n    } else {\n      this.root = node;\n      this.add(sceneNode);\n    }\n\n    return node;\n  }\n\n  private makeOnBeforeRender(node: PointCloudOctreeNode) {\n    return (\n      _renderer: WebGLRenderer,\n      _scene: Scene,\n      _camera: Camera,\n      _geometry: Geometry | BufferGeometry,\n      material: Material,\n    ) => {\n      const materialUniforms = (material as PointCloudMaterial).uniforms;\n\n      materialUniforms.level.value = node.level;\n      materialUniforms.isLeafNode.value = node.isLeafNode;\n\n      const vnStart = this.visibleNodeTextureOffsets.get(node.name);\n      if (vnStart !== undefined) {\n        materialUniforms.vnStart.value = vnStart;\n      }\n\n      const pcIndex = node.pcIndex ? node.pcIndex : this.visibleNodes.indexOf(node);\n      materialUniforms.pcIndex.value = pcIndex;\n\n      // Note: when changing uniforms in onBeforeRender, the flag uniformsNeedUpdate has to be\n      // set to true to instruct ThreeJS to upload them. See also\n      // https://github.com/mrdoob/three.js/issues/9870#issuecomment-368750182.\n\n      // Remove the cast to any when uniformsNeedUpdate has been added to the typings.\n      (material as any) /*ShaderMaterial*/.uniformsNeedUpdate = true;\n    };\n  }\n\n  updateVisibleBounds() {\n    const bounds = this.visibleBounds;\n    bounds.min.set(Infinity, Infinity, Infinity);\n    bounds.max.set(-Infinity, -Infinity, -Infinity);\n\n    for (const node of this.visibleNodes) {\n      if (node.isLeafNode) {\n        bounds.expandByPoint(node.boundingBox.min);\n        bounds.expandByPoint(node.boundingBox.max);\n      }\n    }\n  }\n\n  updateBoundingBoxes(): void {\n    if (!this.showBoundingBox || !this.parent) {\n      return;\n    }\n\n    let bbRoot: any = this.parent.getObjectByName('bbroot');\n    if (!bbRoot) {\n      bbRoot = new Object3D();\n      bbRoot.name = 'bbroot';\n      this.parent.add(bbRoot);\n    }\n\n    const visibleBoxes = [];\n    for (const node of this.visibleNodes) {\n      if (node.boundingBoxNode !== undefined && node.isLeafNode) {\n        visibleBoxes.push(node.boundingBoxNode);\n      }\n    }\n\n    bbRoot.children = visibleBoxes;\n  }\n\n  updateMaterial(\n    material: PointCloudMaterial,\n    visibleNodes: PointCloudOctreeNode[],\n    camera: PerspectiveCamera,\n    renderer: WebGLRenderer,\n  ): void {\n    const maxScale = Math.max(this.scale.x, this.scale.y, this.scale.z);\n    const pixelRatio = renderer.getPixelRatio();\n\n    material.fov = camera.fov * (Math.PI / 180);\n    material.screenWidth = renderer.domElement.clientWidth * pixelRatio;\n    material.screenHeight = renderer.domElement.clientHeight * pixelRatio;\n    material.near = camera.near;\n    material.far = camera.far;\n    material.spacing = this.pcoGeometry.spacing * maxScale;\n    material.uniforms.octreeSize.value = this.pcoGeometry.boundingBox.getSize(helperVec3).x;\n\n    if (\n      material.pointSizeType === PointSizeType.ADAPTIVE ||\n      material.pointColorType === PointColorType.LOD\n    ) {\n      this.updateVisibilityTextureData(visibleNodes, material);\n    }\n  }\n\n  private updateVisibilityTextureData(nodes: PointCloudOctreeNode[], material: PointCloudMaterial) {\n    nodes.sort(byLevelAndIndex);\n\n    const data = new Uint8Array(nodes.length * 4);\n    const offsetsToChild = new Array(nodes.length).fill(Infinity);\n\n    this.visibleNodeTextureOffsets.clear();\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      this.visibleNodeTextureOffsets.set(node.name, i);\n\n      if (i > 0) {\n        const parentName = node.name.slice(0, -1);\n        const parentOffset = this.visibleNodeTextureOffsets.get(parentName)!;\n        const parentOffsetToChild = i - parentOffset;\n\n        offsetsToChild[parentOffset] = Math.min(offsetsToChild[parentOffset], parentOffsetToChild);\n\n        // tslint:disable:no-bitwise\n        const offset = parentOffset * 4;\n        data[offset] = data[offset] | (1 << node.index);\n        data[offset + 1] = offsetsToChild[parentOffset] >> 8;\n        data[offset + 2] = offsetsToChild[parentOffset] % 256;\n        // tslint:enable:no-bitwise\n      }\n\n      data[i * 4 + 3] = node.name.length;\n    }\n\n    const texture = material.visibleNodesTexture;\n    texture.image.data.set(data);\n    texture.needsUpdate = true;\n  }\n\n  private helperSphere = new Sphere();\n\n  nodesOnRay(nodes: PointCloudOctreeNode[], ray: Ray): PointCloudOctreeNode[] {\n    const nodesOnRay: PointCloudOctreeNode[] = [];\n\n    const rayClone = ray.clone();\n    for (const node of nodes) {\n      const sphere = this.helperSphere.copy(node.boundingSphere).applyMatrix4(this.matrixWorld);\n\n      if (rayClone.intersectsSphere(sphere)) {\n        nodesOnRay.push(node);\n      }\n    }\n\n    return nodesOnRay;\n  }\n\n  updateMatrixWorld(force: boolean): void {\n    if (this.matrixAutoUpdate === true) {\n      this.updateMatrix();\n    }\n\n    if (this.matrixWorldNeedsUpdate === true || force === true) {\n      if (!this.parent) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n\n      force = true;\n    }\n  }\n\n  hideDescendants(object: Object3D): void {\n    const toHide: Object3D[] = [];\n    addVisibleChildren(object);\n\n    while (toHide.length > 0) {\n      const objToHide = toHide.shift()!;\n      objToHide.visible = false;\n      addVisibleChildren(objToHide);\n    }\n\n    function addVisibleChildren(obj: Object3D) {\n      for (const child of obj.children) {\n        if (child.visible) {\n          toHide.push(child);\n        }\n      }\n    }\n  }\n\n  moveToOrigin(): void {\n    this.position.set(0, 0, 0); // Reset, then the matrix will be updated in getBoundingBoxWorld()\n    this.position.set(0, 0, 0).sub(this.getBoundingBoxWorld().getCenter(new Vector3()));\n  }\n\n  moveToGroundPlane(): void {\n    this.position.y += -this.getBoundingBoxWorld().min.y;\n  }\n\n  getBoundingBoxWorld(): Box3 {\n    this.updateMatrixWorld(true);\n    return computeTransformedBoundingBox(this.boundingBox, this.matrixWorld);\n  }\n\n  getVisibleExtent() {\n    return this.visibleBounds.applyMatrix4(this.matrixWorld);\n  }\n\n  pick(\n    renderer: WebGLRenderer,\n    camera: PerspectiveCamera,\n    ray: Ray,\n    params: Partial<PickParams> = {},\n  ): PickPoint | null {\n    const pixelRatio = renderer.getPixelRatio();\n    const pickWndSize = Math.floor(\n      (params.pickWindowSize || DEFAULT_PICK_WINDOW_SIZE) * pixelRatio,\n    );\n\n    const width = Math.ceil(renderer.domElement.clientWidth * pixelRatio);\n    const height = Math.ceil(renderer.domElement.clientHeight * pixelRatio);\n\n    const pickState = this.pickState ? this.pickState : (this.pickState = this.getPickState());\n    const pickMaterial = pickState.material;\n\n    // Get all the octree nodes which intersect the picking ray. We only need to render those.\n    const nodes: PointCloudOctreeNode[] = this.nodesOnRay(this.visibleNodes, ray);\n    if (nodes.length === 0) {\n      return null;\n    }\n\n    // Create copies of the nodes so we can render them differently than in the normal point cloud.\n    const tempNodes = [];\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      node.pcIndex = i + 1;\n\n      const sceneNode = node.sceneNode;\n      const tempNode = new Points(sceneNode.geometry, pickMaterial);\n      tempNode.matrix = sceneNode.matrix;\n      tempNode.matrixWorld = sceneNode.matrixWorld;\n      tempNode.matrixAutoUpdate = false;\n      tempNode.frustumCulled = false;\n      (tempNode as any).pcIndex = i + 1;\n      tempNode.onBeforeRender = this.makeOnBeforeRender(node);\n\n      tempNodes.push(tempNode);\n    }\n\n    pickState.scene.autoUpdate = false;\n    pickState.scene.children = tempNodes;\n\n    this.updatePickMaterial(pickMaterial, params);\n    this.updateMaterial(pickMaterial, nodes, camera, renderer);\n    this.updatePickRenderTarget(this.pickState, width, height);\n\n    if (params.onBeforePickRender) {\n      params.onBeforePickRender(pickMaterial, pickState.renderTarget);\n    }\n\n    const pixelPosition = helperVec3; // Use helper vector to prevent extra allocations.\n\n    if (params.pixelPosition) {\n      pixelPosition.copy(params.pixelPosition);\n    } else {\n      pixelPosition.addVectors(camera.position, ray.direction).project(camera);\n      pixelPosition.x = (pixelPosition.x + 1) * width * 0.5;\n      pixelPosition.y = (pixelPosition.y + 1) * height * 0.5;\n    }\n\n    const halfPickWndSize = (pickWndSize - 1) / 2;\n    const x = Math.floor(clamp(pixelPosition.x - halfPickWndSize, 0, width));\n    const y = Math.floor(clamp(pixelPosition.y - halfPickWndSize, 0, height));\n\n    // Render the intersected nodes onto the pick render target, clipping to a small pick window.\n    renderer.setScissor(x, y, pickWndSize, pickWndSize);\n    renderer.setScissorTest(true);\n    renderer.state.buffers.depth.setTest(pickMaterial.depthTest);\n    renderer.state.buffers.depth.setMask(<any>(pickMaterial.depthWrite ? 1 : 0));\n    renderer.state.setBlending(NoBlending);\n\n    renderer.setRenderTarget(pickState.renderTarget);\n    renderer.clear(true, true, true);\n    renderer.render(pickState.scene, camera);\n\n    // Read the pixel from the pick render target.\n    const pixels = new Uint8Array(4 * pickWndSize * pickWndSize);\n    renderer.readRenderTargetPixels(pickState.renderTarget, x, y, pickWndSize, pickWndSize, pixels);\n    renderer.setScissorTest(false);\n    renderer.setRenderTarget(null!);\n\n    const ibuffer = new Uint32Array(pixels.buffer);\n\n    // Find closest hit inside pixelWindow boundaries\n    let min = Number.MAX_VALUE;\n    let hit: PointCloudHit | null = null;\n    for (let u = 0; u < pickWndSize; u++) {\n      for (let v = 0; v < pickWndSize; v++) {\n        const offset = u + v * pickWndSize;\n        const distance =\n          Math.pow(u - (pickWndSize - 1) / 2, 2) + Math.pow(v - (pickWndSize - 1) / 2, 2);\n\n        const pcIndex = pixels[4 * offset + 3];\n        pixels[4 * offset + 3] = 0;\n        const pIndex = ibuffer[offset];\n\n        if (pcIndex > 0 && distance < min) {\n          hit = {\n            pIndex: pIndex,\n            pcIndex: pcIndex - 1,\n          };\n          min = distance;\n        }\n      }\n    }\n\n    return this.getPickPoint(hit, nodes);\n  }\n\n  private getPickPoint(hit: PointCloudHit | null, nodes: PointCloudOctreeNode[]): PickPoint | null {\n    if (!hit) {\n      return null;\n    }\n\n    const point: PickPoint = {};\n\n    const points = nodes[hit.pcIndex] && nodes[hit.pcIndex].sceneNode;\n    if (!points) {\n      return null;\n    }\n\n    const attributes: BufferAttribute[] = (points.geometry as any).attributes;\n\n    for (const property in attributes) {\n      if (!attributes.hasOwnProperty(property)) {\n        continue;\n      }\n\n      const values = attributes[property];\n\n      // tslint:disable-next-line:prefer-switch\n      if (property === 'position') {\n        this.addPositionToPickPoint(point, hit, values, points);\n      } else if (property === 'normal') {\n        this.addNormalToPickPoint(point, hit, values);\n      } else if (property === 'indices') {\n        // TODO\n      } else {\n        if (values.itemSize === 1) {\n          point[property] = values.array[hit.pIndex];\n        } else {\n          const value = [];\n          for (let j = 0; j < values.itemSize; j++) {\n            value.push(values.array[values.itemSize * hit.pIndex + j]);\n          }\n          point[property] = value;\n        }\n      }\n    }\n\n    return point;\n  }\n\n  private addPositionToPickPoint(\n    point: PickPoint,\n    hit: PointCloudHit,\n    values: BufferAttribute,\n    points: Points,\n  ): void {\n    const x = values.array[3 * hit.pIndex];\n    const y = values.array[3 * hit.pIndex + 1];\n    const z = values.array[3 * hit.pIndex + 2];\n\n    point.position = new Vector3(x, y, z).applyMatrix4(points.matrixWorld);\n  }\n\n  private addNormalToPickPoint(\n    point: PickPoint,\n    hit: PointCloudHit,\n    values: BufferAttribute,\n  ): void {\n    const normalsArray = values.array;\n\n    const x = normalsArray[3 * hit.pIndex];\n    const y = normalsArray[3 * hit.pIndex + 1];\n    const z = normalsArray[3 * hit.pIndex + 2];\n\n    const normal = new Vector4(x, y, z, 0);\n    const m = new Matrix4();\n    m.getInverse(this.matrixWorld);\n    m.transpose();\n    normal.applyMatrix4(m);\n\n    point.normal = new Vector3(normal.x, normal.y, normal.z);\n    point.datasetNormal = new Vector3(x, y, z);\n  }\n\n  private getPickState() {\n    const scene = new Scene();\n\n    const material = new PointCloudMaterial();\n    material.pointColorType = PointColorType.POINT_INDEX;\n\n    return {\n      renderTarget: this.makePickRenderTarget(),\n      material: material,\n      scene: scene,\n    };\n  }\n\n  private updatePickMaterial(pickMaterial: PointCloudMaterial, params: Partial<PickParams>): void {\n    const material = this.material;\n\n    pickMaterial.pointSizeType = material.pointSizeType;\n    pickMaterial.shape = material.shape;\n    pickMaterial.size = material.size;\n    pickMaterial.minSize = material.minSize;\n    pickMaterial.maxSize = material.maxSize;\n    pickMaterial.classification = material.classification;\n\n    if (params.pickOutsideClipRegion) {\n      pickMaterial.clipMode = ClipMode.DISABLED;\n    } else {\n      pickMaterial.clipMode = material.clipMode;\n      pickMaterial.setClipBoxes(\n        material.clipMode === ClipMode.CLIP_OUTSIDE ? material.clipBoxes : [],\n      );\n    }\n  }\n\n  private updatePickRenderTarget(pickState: IPickState, width: number, height: number): void {\n    if (pickState.renderTarget.width === width && pickState.renderTarget.height === height) {\n      return;\n    }\n\n    pickState.renderTarget.dispose();\n    pickState.renderTarget = this.makePickRenderTarget();\n    pickState.renderTarget.setSize(width, height);\n  }\n\n  private makePickRenderTarget() {\n    return new WebGLRenderTarget(1, 1, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat,\n    });\n  }\n\n  get progress() {\n    return this.visibleGeometry.length === 0\n      ? 0\n      : this.visibleNodes.length / this.visibleGeometry.length;\n  }\n}\n","const canvas = document.createElement('canvas');\nconst gl: WebGLRenderingContext | null =\n  canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n\nexport const FEATURES = {\n  SHADER_INTERPOLATION: hasExtension('EXT_frag_depth') && hasMinVaryingVectors(8),\n  SHADER_SPLATS:\n    hasExtension('EXT_frag_depth') && hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n  SHADER_EDL: hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n  precision: getPrecision(),\n};\n\nfunction hasExtension(ext: string) {\n  return gl !== null && Boolean(gl.getExtension(ext));\n}\n\nfunction hasMinVaryingVectors(value: number) {\n  return gl !== null && gl.getParameter(gl.MAX_VARYING_VECTORS) >= value;\n}\n\nfunction getPrecision() {\n  if (gl === null) {\n    return '';\n  }\n\n  const vsHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);\n  const vsMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);\n\n  const fsHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n  const fsMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);\n\n  const highpAvailable =\n    vsHighpFloat && fsHighpFloat && vsHighpFloat.precision > 0 && fsHighpFloat.precision > 0;\n\n  const mediumpAvailable =\n    vsMediumpFloat &&\n    fsMediumpFloat &&\n    vsMediumpFloat.precision > 0 &&\n    fsMediumpFloat.precision > 0;\n\n  return highpAvailable ? 'highp' : mediumpAvailable ? 'mediump' : 'lowp';\n}\n","export class Version {\n  version: string;\n  versionMajor: number;\n  versionMinor: number = 0;\n\n  constructor(version: string) {\n    this.version = version;\n\n    const vmLength = version.indexOf('.') === -1 ? version.length : version.indexOf('.');\n    this.versionMajor = parseInt(version.substr(0, vmLength), 10);\n    this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\n    if (isNaN(this.versionMinor)) {\n      this.versionMinor = 0;\n    }\n  }\n\n  newerThan(version: string): boolean {\n    const v = new Version(version);\n\n    if (this.versionMajor > v.versionMajor) {\n      return true;\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  equalOrHigher(version: string): boolean {\n    const v = new Version(version);\n\n    if (this.versionMajor > v.versionMajor) {\n      return true;\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  upTo(version: string): boolean {\n    return !this.newerThan(version);\n  }\n}\n","// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\nimport { Box3, BufferAttribute, BufferGeometry, Uint8BufferAttribute, Vector3 } from 'three';\nimport { PointAttributeName, PointAttributeType } from '../point-attributes';\nimport { PointCloudOctreeGeometryNode } from '../point-cloud-octree-geometry-node';\nimport { Version } from '../version';\nimport { GetUrlFn, XhrRequest } from './types';\n\ninterface AttributeData {\n  attribute: {\n    name: PointAttributeName;\n    type: PointAttributeType;\n    byteSize: number;\n    numElements: number;\n  };\n  buffer: ArrayBuffer;\n}\n\ninterface WorkerResponse {\n  data: {\n    attributeBuffers: { [name: string]: AttributeData };\n    indices: ArrayBuffer;\n    tightBoundingBox: { min: number[]; max: number[] };\n    mean: number[];\n  };\n}\n\ninterface BinaryLoaderOptions {\n  getUrl?: GetUrlFn;\n  version: string;\n  boundingBox: Box3;\n  scale: number;\n  xhrRequest: XhrRequest;\n}\n\nexport class BinaryLoader {\n  version: Version;\n  boundingBox: Box3;\n  scale: number;\n  getUrl: GetUrlFn;\n  disposed: boolean = false;\n  xhrRequest: XhrRequest;\n  callbacks: ((node: PointCloudOctreeGeometryNode) => void)[];\n\n  private workers: Worker[] = [];\n\n  constructor({\n    getUrl = s => Promise.resolve(s),\n    version,\n    boundingBox,\n    scale,\n    xhrRequest,\n  }: BinaryLoaderOptions) {\n    if (typeof version === 'string') {\n      this.version = new Version(version);\n    } else {\n      this.version = version;\n    }\n\n    this.xhrRequest = xhrRequest;\n    this.getUrl = getUrl;\n    this.boundingBox = boundingBox;\n    this.scale = scale;\n    this.callbacks = [];\n  }\n\n  dispose(): void {\n    this.workers.forEach(worker => worker.terminate());\n    this.workers = [];\n\n    this.disposed = true;\n  }\n\n  load(node: PointCloudOctreeGeometryNode): Promise<void> {\n    if (node.loaded || this.disposed) {\n      return Promise.resolve();\n    }\n\n    return Promise.resolve(this.getUrl(this.getNodeUrl(node)))\n      .then(url => this.xhrRequest(url, { mode: 'cors' }))\n      .then(res => res.arrayBuffer())\n      .then(buffer => {\n        return new Promise(resolve => this.parse(node, buffer, resolve));\n      });\n  }\n\n  private getNodeUrl(node: PointCloudOctreeGeometryNode): string {\n    let url = node.getUrl();\n    if (this.version.equalOrHigher('1.4')) {\n      url += '.bin';\n    }\n\n    return url;\n  }\n\n  private parse(\n    node: PointCloudOctreeGeometryNode,\n    buffer: ArrayBuffer,\n    resolve: () => void,\n  ): void {\n    if (this.disposed) {\n      resolve();\n      return;\n    }\n\n    const worker = this.getWorker();\n\n    const pointAttributes = node.pcoGeometry.pointAttributes;\n    const numPoints = buffer.byteLength / pointAttributes.byteSize;\n\n    if (this.version.upTo('1.5')) {\n      node.numPoints = numPoints;\n    }\n\n    worker.onmessage = (e: WorkerResponse) => {\n      if (this.disposed) {\n        resolve();\n        return;\n      }\n\n      const data = e.data;\n\n      const geometry = (node.geometry = node.geometry || new BufferGeometry());\n      geometry.boundingBox = node.boundingBox;\n\n      this.addBufferAttributes(geometry, data.attributeBuffers);\n      this.addIndices(geometry, data.indices);\n      this.addNormalAttribute(geometry, numPoints);\n\n      node.mean = new Vector3().fromArray(data.mean);\n      node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\n      node.loaded = true;\n      node.loading = false;\n      node.failed = false;\n      node.pcoGeometry.numNodesLoading--;\n      node.pcoGeometry.needsUpdate = true;\n\n      this.releaseWorker(worker);\n\n      this.callbacks.forEach(callback => callback(node));\n      resolve();\n    };\n\n    const message = {\n      buffer,\n      pointAttributes,\n      version: this.version.version,\n      min: node.boundingBox.min.toArray(),\n      offset: node.pcoGeometry.offset.toArray(),\n      scale: this.scale,\n      spacing: node.spacing,\n      hasChildren: node.hasChildren,\n    };\n\n    worker.postMessage(message, [message.buffer]);\n  }\n\n  private getWorker(): Worker {\n    const worker = this.workers.pop();\n    if (worker) {\n      return worker;\n    }\n\n    const ctor = require('worker-loader?inline!../workers/binary-decoder-worker.js');\n    return new ctor();\n  }\n\n  private releaseWorker(worker: Worker): void {\n    this.workers.push(worker);\n  }\n\n  private getTightBoundingBox({ min, max }: { min: number[]; max: number[] }): Box3 {\n    const box = new Box3(new Vector3().fromArray(min), new Vector3().fromArray(max));\n    box.max.sub(box.min);\n    box.min.set(0, 0, 0);\n\n    return box;\n  }\n\n  private addBufferAttributes(\n    geometry: BufferGeometry,\n    buffers: { [name: string]: { buffer: ArrayBuffer } },\n  ): void {\n    Object.keys(buffers).forEach(property => {\n      const buffer = buffers[property].buffer;\n\n      if (this.isAttribute(property, PointAttributeName.POSITION_CARTESIAN)) {\n        geometry.addAttribute('position', new BufferAttribute(new Float32Array(buffer), 3));\n      } else if (this.isAttribute(property, PointAttributeName.COLOR_PACKED)) {\n        geometry.addAttribute('color', new BufferAttribute(new Uint8Array(buffer), 3, true));\n      } else if (this.isAttribute(property, PointAttributeName.INTENSITY)) {\n        geometry.addAttribute('intensity', new BufferAttribute(new Float32Array(buffer), 1));\n      } else if (this.isAttribute(property, PointAttributeName.CLASSIFICATION)) {\n        geometry.addAttribute('classification', new BufferAttribute(new Uint8Array(buffer), 1));\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL_SPHEREMAPPED)) {\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL_OCT16)) {\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL)) {\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n      }\n    });\n  }\n\n  private addIndices(geometry: BufferGeometry, indices: ArrayBuffer): void {\n    const indicesAttribute = new Uint8BufferAttribute(indices, 4);\n    indicesAttribute.normalized = true;\n    geometry.addAttribute('indices', indicesAttribute);\n  }\n\n  private addNormalAttribute(geometry: BufferGeometry, numPoints: number): void {\n    if (!geometry.getAttribute('normal')) {\n      const buffer = new Float32Array(numPoints * 3);\n      geometry.addAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n    }\n  }\n\n  private isAttribute(property: string, name: PointAttributeName): boolean {\n    return parseInt(property, 10) === name;\n  }\n}\n","// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\nimport { Box3, Vector3 } from 'three';\nimport { PointAttributes, PointAttributeStringName } from '../point-attributes';\nimport { PointCloudOctreeGeometry } from '../point-cloud-octree-geometry';\nimport { PointCloudOctreeGeometryNode } from '../point-cloud-octree-geometry-node';\nimport { createChildAABB } from '../utils/bounds';\nimport { getIndexFromName } from '../utils/utils';\nimport { Version } from '../version';\nimport { BinaryLoader } from './binary-loader';\nimport { GetUrlFn, XhrRequest } from './types';\n\ninterface BoundingBoxData {\n  lx: number;\n  ly: number;\n  lz: number;\n  ux: number;\n  uy: number;\n  uz: number;\n}\n\ninterface POCJson {\n  version: string;\n  octreeDir: string;\n  projection: string;\n  points: number;\n  boundingBox: BoundingBoxData;\n  tightBoundingBox?: BoundingBoxData;\n  pointAttributes: PointAttributeStringName[];\n  spacing: number;\n  scale: number;\n  hierarchyStepSize: number;\n  hierarchy: [string, number][]; // [name, numPoints][]\n}\n\n/**\n *\n * @param url\n *    The url of the point cloud file (usually cloud.js).\n * @param getUrl\n *    Function which receives the relative URL of a point cloud chunk file which is to be loaded\n *    and shoud return a new url (e.g. signed) in the form of a string or a promise.\n * @param xhrRequest An arrow function for a fetch request\n * @returns\n *    An observable which emits once when the first LOD of the point cloud is loaded.\n */\nexport function loadPOC(\n  url: string,\n  getUrl: GetUrlFn,\n  xhrRequest: XhrRequest,\n): Promise<PointCloudOctreeGeometry> {\n  return Promise.resolve(getUrl(url)).then(transformedUrl => {\n    return xhrRequest(transformedUrl, { mode: 'cors' })\n      .then(res => res.json())\n      .then(parse(transformedUrl, getUrl, xhrRequest));\n  });\n}\n\nfunction parse(url: string, getUrl: GetUrlFn, xhrRequest: XhrRequest) {\n  return (data: POCJson): Promise<PointCloudOctreeGeometry> => {\n    const { offset, boundingBox, tightBoundingBox } = getBoundingBoxes(data);\n\n    const loader = new BinaryLoader({\n      getUrl,\n      version: data.version,\n      boundingBox,\n      scale: data.scale,\n      xhrRequest,\n    });\n\n    const pco = new PointCloudOctreeGeometry(\n      loader,\n      boundingBox,\n      tightBoundingBox,\n      offset,\n      xhrRequest,\n    );\n\n    pco.url = url;\n    pco.octreeDir = data.octreeDir;\n    pco.needsUpdate = true;\n    pco.spacing = data.spacing;\n    pco.hierarchyStepSize = data.hierarchyStepSize;\n    pco.projection = data.projection;\n    pco.offset = offset;\n    pco.pointAttributes = new PointAttributes(data.pointAttributes);\n\n    const nodes: Record<string, PointCloudOctreeGeometryNode> = {};\n\n    const version = new Version(data.version);\n\n    return loadRoot(pco, data, nodes, version).then(() => {\n      if (version.upTo('1.4')) {\n        loadRemainingHierarchy(pco, data, nodes);\n      }\n\n      pco.nodes = nodes;\n      return pco;\n    });\n  };\n}\n\nfunction getBoundingBoxes(\n  data: POCJson,\n): { offset: Vector3; boundingBox: Box3; tightBoundingBox: Box3 } {\n  const min = new Vector3(data.boundingBox.lx, data.boundingBox.ly, data.boundingBox.lz);\n  const max = new Vector3(data.boundingBox.ux, data.boundingBox.uy, data.boundingBox.uz);\n  const boundingBox = new Box3(min, max);\n  const tightBoundingBox = boundingBox.clone();\n\n  const offset = min.clone();\n\n  if (data.tightBoundingBox) {\n    const { lx, ly, lz, ux, uy, uz } = data.tightBoundingBox;\n    tightBoundingBox.min.set(lx, ly, lz);\n    tightBoundingBox.max.set(ux, uy, uz);\n  }\n\n  boundingBox.min.sub(offset);\n  boundingBox.max.sub(offset);\n  tightBoundingBox.min.sub(offset);\n  tightBoundingBox.max.sub(offset);\n\n  return { offset, boundingBox, tightBoundingBox };\n}\n\nfunction loadRoot(\n  pco: PointCloudOctreeGeometry,\n  data: POCJson,\n  nodes: Record<string, PointCloudOctreeGeometryNode>,\n  version: Version,\n): Promise<void> {\n  const name = 'r';\n\n  const root = new PointCloudOctreeGeometryNode(name, pco, pco.boundingBox);\n  root.hasChildren = true;\n  root.spacing = pco.spacing;\n\n  if (version.upTo('1.5')) {\n    root.numPoints = data.hierarchy[0][1];\n  } else {\n    root.numPoints = 0;\n  }\n\n  pco.root = root;\n  nodes[name] = root;\n  return pco.root.load();\n}\n\nfunction loadRemainingHierarchy(\n  pco: PointCloudOctreeGeometry,\n  data: POCJson,\n  nodes: Record<string, PointCloudOctreeGeometryNode>,\n): void {\n  for (let i = 1; i < data.hierarchy.length; i++) {\n    const [name, numPoints] = data.hierarchy[i];\n    const { index, parentName, level } = parseName(name);\n    const parentNode = nodes[parentName];\n\n    const boundingBox = createChildAABB(parentNode.boundingBox, index);\n    const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n    node.level = level;\n    node.numPoints = numPoints;\n    node.spacing = pco.spacing / Math.pow(2, node.level);\n\n    nodes[name] = node;\n    parentNode.addChild(node);\n  }\n}\n\nfunction parseName(name: string): { index: number; parentName: string; level: number } {\n  return {\n    index: getIndexFromName(name),\n    parentName: name.substring(0, name.length - 1),\n    level: name.length - 1,\n  };\n}\n","import { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\nimport { PointCloudOctreeNode } from './point-cloud-octree-node';\n\nexport function isGeometryNode(node?: any): node is PointCloudOctreeGeometryNode {\n  return node !== undefined && node !== null && node.isGeometryNode;\n}\n\nexport function isTreeNode(node?: any): node is PointCloudOctreeNode {\n  return node !== undefined && node !== null && node.isTreeNode;\n}\n","import {\n  Box3,\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  LineBasicMaterial,\n  LineSegments,\n} from 'three';\n\n/**\n *\n * code adapted from three.js BoxHelper.js\n * https://github.com/mrdoob/three.js/blob/dev/src/helpers/BoxHelper.js\n *\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author mschuetz / http://potree.org\n */\n\nexport class Box3Helper extends LineSegments {\n  constructor(box: Box3, color: Color = new Color(0xffff00)) {\n    // prettier-ignore\n    const indices = new Uint16Array([ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ]);\n    // prettier-ignore\n    const positions = new Float32Array([\n      box.min.x, box.min.y, box.min.z,\n      box.max.x, box.min.y, box.min.z,\n      box.max.x, box.min.y, box.max.z,\n      box.min.x, box.min.y, box.max.z,\n      box.min.x, box.max.y, box.min.z,\n      box.max.x, box.max.y, box.min.z,\n      box.max.x, box.max.y, box.max.z,\n      box.min.x, box.max.y, box.max.z\n    ]);\n\n    const geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.addAttribute('position', new BufferAttribute(positions, 3));\n\n    const material = new LineBasicMaterial({ color: color });\n\n    super(geometry, material);\n  }\n}\n","import { IPointCloudTreeNode } from '../types';\n\nexport type Node = IPointCloudTreeNode;\n\nexport class LRUItem {\n  next: LRUItem | null = null;\n  previous: LRUItem | null = null;\n  constructor(public node: Node) {}\n}\n\n/**\n * A doubly-linked-list of the least recently used elements.\n */\nexport class LRU {\n  // the least recently used item\n  first: LRUItem | null = null;\n  // the most recently used item\n  last: LRUItem | null = null;\n  numPoints: number = 0;\n\n  private items = new Map<number, LRUItem>();\n\n  constructor(public pointBudget: number = 1_000_000) {}\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  has(node: Node): boolean {\n    return this.items.has(node.id);\n  }\n\n  /**\n   * Makes the specified the most recently used item. if the list does not contain node, it will\n   * be added.\n   */\n  touch(node: Node) {\n    if (!node.loaded) {\n      return;\n    }\n\n    const item = this.items.get(node.id);\n    if (item) {\n      this.touchExisting(item);\n    } else {\n      this.addNew(node);\n    }\n  }\n\n  private addNew(node: Node): void {\n    const item = new LRUItem(node);\n    item.previous = this.last;\n    this.last = item;\n    if (item.previous) {\n      item.previous.next = item;\n    }\n\n    if (!this.first) {\n      this.first = item;\n    }\n\n    this.items.set(node.id, item);\n    this.numPoints += node.numPoints;\n  }\n\n  private touchExisting(item: LRUItem): void {\n    if (!item.previous) {\n      // handle touch on first element\n      if (item.next) {\n        this.first = item.next;\n        this.first.previous = null;\n        item.previous = this.last;\n        item.next = null;\n        this.last = item;\n\n        if (item.previous) {\n          item.previous.next = item;\n        }\n      }\n    } else if (!item.next) {\n      // handle touch on last element\n    } else {\n      // handle touch on any other element\n      item.previous.next = item.next;\n      item.next.previous = item.previous;\n      item.previous = this.last;\n      item.next = null;\n      this.last = item;\n\n      if (item.previous) {\n        item.previous.next = item;\n      }\n    }\n  }\n\n  remove(node: Node) {\n    const item = this.items.get(node.id);\n    if (!item) {\n      return;\n    }\n\n    if (this.items.size === 1) {\n      this.first = null;\n      this.last = null;\n    } else {\n      if (!item.previous) {\n        this.first = item.next;\n        this.first!.previous = null;\n      }\n\n      if (!item.next) {\n        this.last = item.previous;\n        this.last!.next = null;\n      }\n\n      if (item.previous && item.next) {\n        item.previous.next = item.next;\n        item.next.previous = item.previous;\n      }\n    }\n\n    this.items.delete(node.id);\n    this.numPoints -= node.numPoints;\n  }\n\n  getLRUItem(): Node | undefined {\n    return this.first ? this.first.node : undefined;\n  }\n\n  freeMemory(): void {\n    if (this.items.size <= 1) {\n      return;\n    }\n\n    while (this.numPoints > this.pointBudget * 2) {\n      const node = this.getLRUItem();\n      if (node) {\n        this.disposeDescendants(node);\n      }\n    }\n  }\n\n  disposeDescendants(node: Node): void {\n    node.traverse(n => {\n      if (n.loaded) {\n        n.dispose();\n        this.remove(n);\n      }\n    });\n  }\n}\n","import {\n  Box3,\n  Camera,\n  Frustum,\n  Matrix4,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Vector2,\n  Vector3,\n  WebGLRenderer,\n} from 'three';\nimport {\n  DEFAULT_POINT_BUDGET,\n  MAX_LOADS_TO_GPU,\n  MAX_NUM_NODES_LOADING,\n  PERSPECTIVE_CAMERA,\n} from './constants';\nimport { FEATURES } from './features';\nimport { GetUrlFn, loadPOC } from './loading';\nimport { ClipMode } from './materials';\nimport { PointCloudOctree } from './point-cloud-octree';\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\nimport { PointCloudOctreeNode } from './point-cloud-octree-node';\nimport { isGeometryNode, isTreeNode } from './type-predicates';\nimport { IPointCloudTreeNode, IPotree, IVisibilityUpdateResult } from './types';\nimport { BinaryHeap } from './utils/binary-heap';\nimport { Box3Helper } from './utils/box3-helper';\nimport { LRU } from './utils/lru';\n\nexport class QueueItem {\n  constructor(\n    public pointCloudIndex: number,\n    public weight: number,\n    public node: IPointCloudTreeNode,\n    public parent?: IPointCloudTreeNode | null,\n  ) {}\n}\n\nexport class Potree implements IPotree {\n  private _pointBudget: number = DEFAULT_POINT_BUDGET;\n  private _rendererSize: Vector2 = new Vector2();\n\n  maxNumNodesLoading: number = MAX_NUM_NODES_LOADING;\n  features = FEATURES;\n  lru = new LRU(this._pointBudget);\n\n  loadPointCloud(\n    url: string,\n    getUrl: GetUrlFn,\n    xhrRequest = (input: RequestInfo, init?: RequestInit) => fetch(input, init),\n  ): Promise<PointCloudOctree> {\n    return loadPOC(url, getUrl, xhrRequest).then(geometry => new PointCloudOctree(this, geometry));\n  }\n\n  updatePointClouds(\n    pointClouds: PointCloudOctree[],\n    camera: Camera,\n    renderer: WebGLRenderer,\n  ): IVisibilityUpdateResult {\n    const result = this.updateVisibility(pointClouds, camera, renderer);\n\n    for (let i = 0; i < pointClouds.length; i++) {\n      const pointCloud = pointClouds[i];\n      if (pointCloud.disposed) {\n        continue;\n      }\n\n      pointCloud.updateMaterial(\n        pointCloud.material,\n        pointCloud.visibleNodes,\n        camera as PerspectiveCamera,\n        renderer,\n      );\n      pointCloud.updateVisibleBounds();\n      pointCloud.updateBoundingBoxes();\n    }\n\n    this.lru.freeMemory();\n\n    return result;\n  }\n\n  get pointBudget(): number {\n    return this._pointBudget;\n  }\n\n  set pointBudget(value: number) {\n    if (value !== this._pointBudget) {\n      this._pointBudget = value;\n      this.lru.pointBudget = value;\n      this.lru.freeMemory();\n    }\n  }\n\n  private updateVisibility(\n    pointClouds: PointCloudOctree[],\n    camera: Camera,\n    renderer: WebGLRenderer,\n  ): IVisibilityUpdateResult {\n    let numVisiblePoints = 0;\n\n    const visibleNodes: PointCloudOctreeNode[] = [];\n    const unloadedGeometry: PointCloudOctreeGeometryNode[] = [];\n\n    // calculate object space frustum and cam pos and setup priority queue\n    const { frustums, cameraPositions, priorityQueue } = this.updateVisibilityStructures(\n      pointClouds,\n      camera,\n    );\n\n    let loadedToGPUThisFrame = 0;\n    let exceededMaxLoadsToGPU = false;\n    let nodeLoadFailed = false;\n    let queueItem: QueueItem | undefined;\n\n    while ((queueItem = priorityQueue.pop()) !== undefined) {\n      let node = queueItem.node;\n\n      // If we will end up with too many points, we stop right away.\n      if (numVisiblePoints + node.numPoints > this.pointBudget) {\n        break;\n      }\n\n      const pointCloudIndex = queueItem.pointCloudIndex;\n      const pointCloud = pointClouds[pointCloudIndex];\n\n      const maxLevel = pointCloud.maxLevel !== undefined ? pointCloud.maxLevel : Infinity;\n\n      if (\n        node.level > maxLevel ||\n        !frustums[pointCloudIndex].intersectsBox(node.boundingBox) ||\n        this.shouldClip(pointCloud, node.boundingBox)\n      ) {\n        continue;\n      }\n\n      numVisiblePoints += node.numPoints;\n      pointCloud.numVisiblePoints += node.numPoints;\n\n      const parentNode = queueItem.parent;\n\n      if (isGeometryNode(node) && (!parentNode || isTreeNode(parentNode))) {\n        if (node.loaded && loadedToGPUThisFrame < MAX_LOADS_TO_GPU) {\n          node = pointCloud.toTreeNode(node, parentNode);\n          loadedToGPUThisFrame++;\n        } else if (!node.failed) {\n          if (node.loaded && loadedToGPUThisFrame >= MAX_LOADS_TO_GPU) {\n            exceededMaxLoadsToGPU = true;\n          }\n          unloadedGeometry.push(node);\n          pointCloud.visibleGeometry.push(node);\n        } else {\n          nodeLoadFailed = true;\n          continue;\n        }\n      }\n\n      if (isTreeNode(node)) {\n        this.updateTreeNodeVisibility(pointCloud, node, visibleNodes);\n        pointCloud.visibleGeometry.push(node.geometryNode);\n      }\n\n      const halfHeight =\n        0.5 * renderer.getSize(this._rendererSize).height * renderer.getPixelRatio();\n\n      this.updateChildVisibility(\n        queueItem,\n        priorityQueue,\n        pointCloud,\n        node,\n        cameraPositions[pointCloudIndex],\n        camera,\n        halfHeight,\n      );\n    } // end priority queue loop\n\n    const numNodesToLoad = Math.min(this.maxNumNodesLoading, unloadedGeometry.length);\n    const nodeLoadPromises: Promise<void>[] = [];\n    for (let i = 0; i < numNodesToLoad; i++) {\n      nodeLoadPromises.push(unloadedGeometry[i].load());\n    }\n\n    return {\n      visibleNodes: visibleNodes,\n      numVisiblePoints: numVisiblePoints,\n      exceededMaxLoadsToGPU: exceededMaxLoadsToGPU,\n      nodeLoadFailed: nodeLoadFailed,\n      nodeLoadPromises: nodeLoadPromises,\n    };\n  }\n\n  private updateTreeNodeVisibility(\n    pointCloud: PointCloudOctree,\n    node: PointCloudOctreeNode,\n    visibleNodes: IPointCloudTreeNode[],\n  ): void {\n    this.lru.touch(node.geometryNode);\n\n    const sceneNode = node.sceneNode;\n    sceneNode.visible = true;\n    sceneNode.material = pointCloud.material;\n    sceneNode.updateMatrix();\n    sceneNode.matrixWorld.multiplyMatrices(pointCloud.matrixWorld, sceneNode.matrix);\n\n    visibleNodes.push(node);\n    pointCloud.visibleNodes.push(node);\n\n    this.updateBoundingBoxVisibility(pointCloud, node);\n  }\n\n  private updateChildVisibility(\n    queueItem: QueueItem,\n    priorityQueue: BinaryHeap<QueueItem>,\n    pointCloud: PointCloudOctree,\n    node: IPointCloudTreeNode,\n    cameraPosition: Vector3,\n    camera: Camera,\n    halfHeight: number,\n  ): void {\n    const children = node.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child === null) {\n        continue;\n      }\n\n      const sphere = child.boundingSphere;\n      const distance = sphere.center.distanceTo(cameraPosition);\n      const radius = sphere.radius;\n\n      let projectionFactor = 0.0;\n\n      if (camera.type === PERSPECTIVE_CAMERA) {\n        const perspective = camera as PerspectiveCamera;\n        const fov = (perspective.fov * Math.PI) / 180.0;\n        const slope = Math.tan(fov / 2.0);\n        projectionFactor = halfHeight / (slope * distance);\n      } else {\n        const orthographic = camera as OrthographicCamera;\n        projectionFactor = (2 * halfHeight) / (orthographic.top - orthographic.bottom);\n      }\n\n      const screenPixelRadius = radius * projectionFactor;\n\n      // Don't add the node if it'll be too small on the screen.\n      if (screenPixelRadius < pointCloud.minNodePixelSize) {\n        continue;\n      }\n\n      // Nodes which are larger will have priority in loading/displaying.\n      const weight = distance < radius ? Number.MAX_VALUE : screenPixelRadius + 1 / distance;\n\n      priorityQueue.push(new QueueItem(queueItem.pointCloudIndex, weight, child, node));\n    }\n  }\n\n  private updateBoundingBoxVisibility(\n    pointCloud: PointCloudOctree,\n    node: PointCloudOctreeNode,\n  ): void {\n    if (pointCloud.showBoundingBox && !node.boundingBoxNode) {\n      const boxHelper = new Box3Helper(node.boundingBox);\n      boxHelper.matrixAutoUpdate = false;\n      pointCloud.boundingBoxNodes.push(boxHelper);\n      node.boundingBoxNode = boxHelper;\n      node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\n    } else if (pointCloud.showBoundingBox && node.boundingBoxNode) {\n      node.boundingBoxNode.visible = true;\n      node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\n    } else if (!pointCloud.showBoundingBox && node.boundingBoxNode) {\n      node.boundingBoxNode.visible = false;\n    }\n  }\n\n  private shouldClip(pointCloud: PointCloudOctree, boundingBox: Box3): boolean {\n    const material = pointCloud.material;\n\n    if (material.numClipBoxes === 0 || material.clipMode !== ClipMode.CLIP_OUTSIDE) {\n      return false;\n    }\n\n    const box2 = boundingBox.clone();\n    pointCloud.updateMatrixWorld(true);\n    box2.applyMatrix4(pointCloud.matrixWorld);\n\n    const clipBoxes = material.clipBoxes;\n    for (let i = 0; i < clipBoxes.length; i++) {\n      const clipMatrixWorld = clipBoxes[i].matrix;\n      const clipBoxWorld = new Box3(\n        new Vector3(-0.5, -0.5, -0.5),\n        new Vector3(0.5, 0.5, 0.5),\n      ).applyMatrix4(clipMatrixWorld);\n      if (box2.intersectsBox(clipBoxWorld)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private updateVisibilityStructures = (() => {\n    const frustumMatrix = new Matrix4();\n    const inverseWorldMatrix = new Matrix4();\n    const cameraMatrix = new Matrix4();\n\n    return (\n      pointClouds: PointCloudOctree[],\n      camera: Camera,\n    ): {\n      frustums: Frustum[];\n      cameraPositions: Vector3[];\n      priorityQueue: BinaryHeap<QueueItem>;\n    } => {\n      const frustums: Frustum[] = [];\n      const cameraPositions = [];\n      const priorityQueue = new BinaryHeap<QueueItem>(x => 1 / x.weight);\n\n      for (let i = 0; i < pointClouds.length; i++) {\n        const pointCloud = pointClouds[i];\n\n        if (!pointCloud.initialized()) {\n          continue;\n        }\n\n        pointCloud.numVisiblePoints = 0;\n        pointCloud.visibleNodes = [];\n        pointCloud.visibleGeometry = [];\n\n        camera.updateMatrixWorld(false);\n\n        // Furstum in object space.\n        const inverseViewMatrix = camera.matrixWorldInverse;\n        const worldMatrix = pointCloud.matrixWorld;\n        frustumMatrix\n          .identity()\n          .multiply(camera.projectionMatrix)\n          .multiply(inverseViewMatrix)\n          .multiply(worldMatrix);\n        frustums.push(new Frustum().setFromMatrix(frustumMatrix));\n\n        // Camera position in object space\n        inverseWorldMatrix.getInverse(worldMatrix);\n        cameraMatrix\n          .identity()\n          .multiply(inverseWorldMatrix)\n          .multiply(camera.matrixWorld);\n        cameraPositions.push(new Vector3().setFromMatrixPosition(cameraMatrix));\n\n        if (pointCloud.visible && pointCloud.root !== null) {\n          const weight = Number.MAX_VALUE;\n          priorityQueue.push(new QueueItem(i, weight, pointCloud.root));\n        }\n\n        // Hide any previously visible nodes. We will later show only the needed ones.\n        if (isTreeNode(pointCloud.root)) {\n          pointCloud.hideDescendants(pointCloud.root.sceneNode);\n        }\n\n        for (const boundingBoxNode of pointCloud.boundingBoxNodes) {\n          boundingBoxNode.visible = false;\n        }\n      }\n\n      return { frustums, cameraPositions, priorityQueue };\n    };\n  })();\n}\n","export * from './materials';\nexport * from './point-attributes';\nexport * from './point-cloud-octree-geometry-node';\nexport * from './point-cloud-octree-geometry';\nexport * from './point-cloud-octree';\nexport * from './point-cloud-tree';\nexport * from './potree';\nexport * from './types';\nexport * from './version';\n"],"sourceRoot":""}